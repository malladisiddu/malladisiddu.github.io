[{"content":"Media Coverage https://www.uptycs.com/blog/new-poc-exploit-backdoor-malware\nCoverage: https://www.itsecuritynews.info/fake-poc-for-linux-kernel-vulnerability-on-github-exposes-researchers-to-malware/ https://thehackernews.com/2023/07/blog-post.html https://www.darkreading.com/attacks-breaches/linux-hacker-exploits-researchers-with-fake-pocs-posted-to-github https://www.bleepingcomputer.com/news/security/fake-linux-vulnerability-exploit-drops-data-stealing-malware/#google_vignette https://thecyberwire.com/podcasts/daily-podcast/1862/notes https://blog.kowatek.com/2023/07/13/fake-poc-for-linux-kernel-vulnerability-on-github-exposes-researchers-to-malware/ https://pledgetimes.com/fake-poc-a-new-vulnerability-in-the-linux-kernel/ https://open.spotify.com/episode/5G7RgkJJ0u0BZmFEc4wM41?si=tWa9FfikSKi-qLDD-KQv5A\u0026amp;context=spotify%3Ashow%3A4orGHEysjCAWvGEbHzeL9A https://www.scmagazine.com/news/devops/fake-poc-github-backdoor https://primenewsprint.com/techonolgy/linux-hacker-exploits-researchers-with-fake-pocs-posted-to-github/ https://www.csoonline.com/article/646239/fake-poc-with-data-stealing-malware-discovered-on-github.html https://cloudsecurityalliance.org/blog/2023/08/04/poc-exploit-fake-proof-of-concept-with-backdoor-malware/ https://www.hackread.com/fake-github-repos-malware-as-pocs/ https://www.swapupdate.in/fake-poc-for-linux-kernel-vulnerability-on-github-exposes-researchers-to-malware/ https://www.uptycs.com/blog/winrar-vulnerability-exploitation\nCoverage: https://thecyberwire.com/newsletters/daily-briefing/12/173 ","permalink":"https://malladisiddu.github.io/media-coverage/media-coverage/","summary":"Media Coverage https://www.uptycs.com/blog/new-poc-exploit-backdoor-malware\nCoverage: https://www.itsecuritynews.info/fake-poc-for-linux-kernel-vulnerability-on-github-exposes-researchers-to-malware/ https://thehackernews.com/2023/07/blog-post.html https://www.darkreading.com/attacks-breaches/linux-hacker-exploits-researchers-with-fake-pocs-posted-to-github https://www.bleepingcomputer.com/news/security/fake-linux-vulnerability-exploit-drops-data-stealing-malware/#google_vignette https://thecyberwire.com/podcasts/daily-podcast/1862/notes https://blog.kowatek.com/2023/07/13/fake-poc-for-linux-kernel-vulnerability-on-github-exposes-researchers-to-malware/ https://pledgetimes.com/fake-poc-a-new-vulnerability-in-the-linux-kernel/ https://open.spotify.com/episode/5G7RgkJJ0u0BZmFEc4wM41?si=tWa9FfikSKi-qLDD-KQv5A\u0026amp;context=spotify%3Ashow%3A4orGHEysjCAWvGEbHzeL9A https://www.scmagazine.com/news/devops/fake-poc-github-backdoor https://primenewsprint.com/techonolgy/linux-hacker-exploits-researchers-with-fake-pocs-posted-to-github/ https://www.csoonline.com/article/646239/fake-poc-with-data-stealing-malware-discovered-on-github.html https://cloudsecurityalliance.org/blog/2023/08/04/poc-exploit-fake-proof-of-concept-with-backdoor-malware/ https://www.hackread.com/fake-github-repos-malware-as-pocs/ https://www.swapupdate.in/fake-poc-for-linux-kernel-vulnerability-on-github-exposes-researchers-to-malware/ https://www.uptycs.com/blog/winrar-vulnerability-exploitation\nCoverage: https://thecyberwire.com/newsletters/daily-briefing/12/173 ","title":"News"},{"content":"This year my team c0d3_h4cki05_ got the opportunity to host BSides Delhi CTF. We organized the CTF on October 10th which is a 10 hour CTF (13.00 - 22.00 IST). Also this is a begginer friendly CTF. I\u0026rsquo;m happy that it went well. Yay! I authored three challenges for this CTF which are of difficulty ranging from easy, medium and hard. This blog post is to cover the intended solutions to all the 3 crypto challenges. So here we go,\nS.No. Challenge Points Author 1 maglc RSA 953 st0ic3r 2 Weird 994 st0ic3r 3 Big RSA 1000 st0ic3r maglc RSA Challenge Description:\nAlice tried to make RSA encryption more secure by using random numbers. But when I tested the encryption I found a vulnerability. Can you find it ?\nThis is the first and easy crypto challenge for BSides Delhi CTF - 2020. In this challenge you are given encryption files encrypt.py and output file output.txt.\nLets see the encrypt.py:\nfrom Crypto.Util.number import getPrime, isPrime, bytes_to_long from random import getrandbits from secret import flag a = getrandbits(64) b = getrandbits(64) e = getPrime(64) r = [] r.append((a*getrandbits(64)+b)%e) k = 0 while k\u0026lt;len(flag): r.append((a*r[k]+b)%e) k+=1 p = getPrime(512) i = 1 while True: q = p + i if isPrime(q): break i += 1 n = p*q m = bytes_to_long(flag) c = pow(m,e,n) obj = open(\u0026#39;output.txt\u0026#39;,\u0026#39;w\u0026#39;) obj.write(\u0026#34;r = \u0026#34; + str(r) + \u0026#34;\\n\u0026#34;) obj.write(\u0026#34;c = \u0026#34; + hex(c) + \u0026#34;\\n\u0026#34;) obj.write(\u0026#34;n = \u0026#34; + hex(n) + \u0026#34;\\n\u0026#34;) obj.close() We can see some kind of Pseudo Random Number Generator. It is Linear Congruential Generator(LCG) which is one of the easiest PRNG to crack. Lets see the contents of output.txt,\nr = [8369875715811823465, 445158310791574166, 2720555425160593675, 7432270455188990462, 2446251786048361946, 55762871963467021, 7562020044022273693, 4880950714387710915, 1980725435082363925, 6123245747443869158, 4341288451522003293, 3111260810610424680, 4140237704488186322, 8334445125395496182, 5047625506525476652, 1757571238833421910, 9376059903619511820, 6110215991516233738, 2352831123581007803, 9117287170545018735, 9083707904731367018, 1859293174547632281, 2245872203465393980, 4092355223399900664, 8979431278774017347, 4456461600515791560, 2863137587848225810, 5403052783947990466, 3528811102063731114, 2874817484721206679, 8449078310597518955, 11016217750450662607, 11097228115924669078, 10892757142981824109, 9850784794499231027, 5885192258462707887, 5292818685021887106, 4870356470560820389, 9580459175047702840] c = 0xd81666bd36032affaee5abd0c8b08da132ca5780514a69231f93ee5e37008a559a54614eb176ff37cfe88fe2c53a761258c704b912146f5c21c4182eca8bca165ef60be06984dbb650a0624fae7b9ffa696069d90ae856e6844d0fe11c8c4633bf04dc02b2ed87f2948bdb903c83163ff18e99c4a4a8a2ae46cead6a334f9712 n = 0xee5ebad033cb6a780b84e957981c249c35cb20af0eb9ea404558b33f7a2637fd1544ee8ebdec95e842a0abbe22b25cc5e2663f1ad4efece9cb4d1222f169c6a1f669b64afa454aa8ef9f378d0498a4c4c4b1055873576f3616a4b09ed4e81cef6d001746b56b4a2ba4db5a52de7343dd057f99bf552e987e3672f2fa7b7797e5 Also see this part of the code,\np = getPrime(512) i = 1 while True: q = p + i if isPrime(q): break i += 1 n = p*q isn\u0026rsquo;t that suspicious? yeah p and q are very close, so we can factorize them using fermat factorization principle.\nOkay here is the entire exploit script,\nfrom Crypto.Util.number import long_to_bytes, inverse from functools import reduce from gmpy2 import gcd,invert, isqrt, square, is_square def fermat_factors(n): assert n % 2 != 0 a = isqrt(n) b2 = square(a) - n while not is_square(b2): a += 1 b2 = square(a) - n return a + isqrt(b2), a - isqrt(b2) def crack_unknown_modulus(states): diffs = [s1 - s0 for s0, s1 in zip(states, states[1:])] zeroes = [t2*t0 - t1*t1 for t0, t1, t2 in zip(diffs, diffs[1:], diffs[2:])] modulus = abs(reduce(gcd, zeroes)) return modulus r = [8369875715811823465, 445158310791574166, 2720555425160593675, 7432270455188990462, 2446251786048361946, 55762871963467021, 7562020044022273693, 4880950714387710915, 1980725435082363925, 6123245747443869158, 4341288451522003293, 3111260810610424680, 4140237704488186322, 8334445125395496182, 5047625506525476652, 1757571238833421910, 9376059903619511820, 6110215991516233738, 2352831123581007803, 9117287170545018735, 9083707904731367018, 1859293174547632281, 2245872203465393980, 4092355223399900664, 8979431278774017347, 4456461600515791560, 2863137587848225810, 5403052783947990466, 3528811102063731114, 2874817484721206679, 8449078310597518955, 11016217750450662607, 11097228115924669078, 10892757142981824109, 9850784794499231027, 5885192258462707887, 5292818685021887106, 4870356470560820389, 9580459175047702840] c = 0xd81666bd36032affaee5abd0c8b08da132ca5780514a69231f93ee5e37008a559a54614eb176ff37cfe88fe2c53a761258c704b912146f5c21c4182eca8bca165ef60be06984dbb650a0624fae7b9ffa696069d90ae856e6844d0fe11c8c4633bf04dc02b2ed87f2948bdb903c83163ff18e99c4a4a8a2ae46cead6a334f9712 n = 0xee5ebad033cb6a780b84e957981c249c35cb20af0eb9ea404558b33f7a2637fd1544ee8ebdec95e842a0abbe22b25cc5e2663f1ad4efece9cb4d1222f169c6a1f669b64afa454aa8ef9f378d0498a4c4c4b1055873576f3616a4b09ed4e81cef6d001746b56b4a2ba4db5a52de7343dd057f99bf552e987e3672f2fa7b7797e5 #fermat factors #p = 12937895237767594932493558364485923657617347496746440870331522787664135451357486215306150323273159558144866156707046930282415553655802768716465496664386881 #q = 12937895237767594932493558364485923657617347496746440870331522787664135451357486215306150323273159558144866156707046930282415553655802768716465496664386981 p, q = fermat_factors(n) e = crack_unknown_modulus(r) phi = (p-1)*(q-1) d = inverse(e,phi) print(long_to_bytes(pow(c,d,n))) Running the above exploit script, we get the flag: BSDCTF{Ah!_w3LL_D0n3_7h475_l1k3_4_pr0}\nWeird Challenge Description:\nWeird, yet easy! This was the second challenge that was given in BSides Delhi CTF - 2020. In this challenge you are given encryption file encrypt.py and output file output.txt.\nLets see the contents in the encrypt.py,\nfrom Crypto.Util.number import getPrime, getRandomRange, bytes_to_long, inverse from gmpy2 import gcd, lcm from flag import flag def keygen(): p = getPrime(512) q = getPrime(512) n = p*q g = getRandomRange(0,pow(n,2)) return (g, n) def encrypt(message, publickey, g): r = getRandomRange(0,publickey) assert gcd(r,publickey) == 1 m1 = pow(g,int(message),pow(publickey,2))*pow(r,publickey,pow(publickey,2)) c = m1 % pow(publickey,2) return c f = open(\u0026#39;output.txt\u0026#39;,\u0026#39;w\u0026#39;) pubkey = keygen() ciphertexts = [] for i in flag:\tciphertexts.append(encrypt(i, pubkey[1], pubkey[0])) f.write(\u0026#39;g = \u0026#39; + str(pubkey[0]) + \u0026#39;\\n\u0026#39;) f.write(\u0026#39;n = \u0026#39; + str(pubkey[1]) + \u0026#39;\\n\u0026#39;) f.write(\u0026#39;c = \u0026#39; + str(ciphertexts) + \u0026#39;\\n\u0026#39;) f.close() this is Paillier Cryptosystem which you need to understand by seeing the encrytion file. I gave it very directly, so you don\u0026rsquo;t need to worry about that. Now let us see the contents of output.txt file,\ng = 3064483479119078003746764730544409326632988031730244267570606419870241763172042290268790637568853878013120762024676868019161041918635864029486437085080711329770906115917707765495807249869221063627360023708262585149362744121034405972662573990291187157281361626077513326584468446610370515737761794656235787718411868891405879655054951069983051871846737434567477529981308733751055720080442173971719372410703464348456865078946205101041762102043345827882561830737333983788945111204706669750723352244012084616764214800272744427165949976497661393661214767535405002731450556145490105507761711819068432999545435877889723707693 n = 92323032016735545564669921985320000244114757437882665811969290814754961456436884648109047049537997174091217591128908955035057851804628537110209625589730144047166711556723392583795647752685190464911004762110190170169614931319612260910961852393814783406980753711632089394987875359845869446171420929689358873123 c = [5940850133774970843332908436155033568447548625341625881601629465519927159720953942167138274398024196857023660043017108238389240766594717604952439180530568085038511813138583654501176738844164687845301409517402208846403932365774572275541629417265375615844881085658667783670084038116747791403424713777806916884694791618333866204495223796894384829871001167867571031567384150065975063220340252650675925924229187155878619985990912118083304418277703348870019758247161856035400406786082244080001772262100435288386883603832749003432365759629385108576168579530538694189489221774243586184498401968700926459296522505954824658129, 5807060169512354774280115239638653822122920600757328261759853974516873748796175508667023007796296946145166692656058982813298326151581059921642272409921425734071027484655210959102052492583349319715920253214061016501838239584659366059999429365267633619410410975277561166104777474637260629285968200937064820564330940565399375513670415682091626574470629255135636700021760519418849197517116602616600425013115230302515471331863935247085606640703367820105939417171085841987489181370769183676317049661907261070755793012092221727890402066438449120816928941628948870553407960618254669187640445568596182889477340040582199431174, 7547814380444583620893569720512081957793897557742707764197802506826917038806886360991255503331230722616546176206518568205003676114900308140883993500038233924142173303863369524598252853570335427121941018813775139777452024989173149963617253307314766739313549648615847342156565240087317609309958087162103155589356921812709418199916621769839551091694629309759415648635807918839677761132865245242998631225446695215889441674928893114898729034074912407125367388185493682713762791642619376870773334133841304620099016436835302526632114580061637192715149432400155791020813508591054911603041900510479282661959102467039219486180, 7919485431326971559859812057710590023582002478375671078797807147874907341197713059060729623259779030078040430493147450801774357982075328287028026552814120563362058271474202062700072189210335972360499170427377306389246195457194547430722103594130010138840876590204620972106789370827316716254583474194412849960468528740056838294111351990133644066106614488511616935542733248349347092902727646489709888252882647343668606080124099007814053599470586826411749108214357860714480834397664692002714123548064411521312076286128915689116424790081981496918168203090144143477609521363490000109123487462470876431002817959528391683432, 939545072129894576257890657273746873332709279876981270640805402718750568101997223921674331005446965434460173251917495804040342276762588951998948356271985151976367979920761559134377017668623360503574518720007923436398131008321817748555288334752910529600878148478347857217477963757691993136709754843740065018301473517543695094897480468761267167665062522886577663342334369639486104970584960341823578370421333609897217713395661431686637740821263437860176298160409779833732984318517606536308822741446254035209026770449137759033745857244742097910868428847036503232711494845530122628237371096885210539236858694872066445348, 7350842968208247938228806606863076478496922974995129099747429185924621319559239478136202233610787118803410636130547622161771895245603254571262160475810284793822536188715073186886124482802143049339363165787547562567240844025512020499956608926915917918905591440856616076821406254570490578948526093902218407905108878991671800763266375187439178917835234896920464584987452212468189554011049939415862609077073160045775634686680467696697595097474384876004859588749815985345189042292152598103157353323531130256125870519166696129042113507068571955674323141286849733280487479167485308804347201596677332419750266548763638552354, 4847086521082622193057514348662429868791074035720315514587101918917981653046166093589126791433500050418662956274713508010903792291714348246575368874233744558017172105126728825483469519515052481828090102840527027815610535515627616158821217470929817689370419950676702058798137604929610917142685541904579167939519635186038925842240328808991592124878060542619354433181678709014273871726782085500555918918537695298444278173804723809133354270626935352594839898928289034971524169787973213377145546972839190261311677294361016357535121874694646925651268898831568424623209044420323687359930566571016716227852950896553006177132, 6053076696974557109844127063536133372524168559612230687366015157878658802659420745123072067016152505537784013879438511946086309633112320924551999833829035766225320486534201904400880834206258671512353428428722229425485120630366560327512383762072302456812845625797446230112190860579378853292810472416775377476131470487083892872193543517932694466640805624107309024568217290705637071142906267323531842580564643920553828458014955249641967367302739098130394450475168617032532921422280952099310452135110379108861017886700877383657798933200707131314513449264470793832251243622041930003682352098062007154746131262921800579093, 7198857973754330810983610824954388844943613527835560318077049317863826924047760573200835665416272821579028565373771837727115028151865261323911681956429700736067576788939705828696872669610923749079350445268727035363260385221101568663863101697237779288950973277019665229205151398764496620442924708575218181967079423583752328900987478339340016185398615744153608716203618798841736297729065223264359444853124244799831528487466544643900248001303654052720451995371570034901366777808436959674533551004342571628078678467499336596654112255731935285763741976851118283953583669743638419095067407318948360222036635986069869890503, 4648862951490847814623978008361292164943312330292380612099756530061676710863679220361054157140898538923139426591175055860150201627337446154261422943470880102231776114641748319767600428665397364412111725259088487930862284004895427544690644888414173999267598631349466413590651770020899962016220626611935755399603776244732743007452265578543626109867859660752319683262536110306129307605799766924640352527526883902960828623713418545732559668007124244180598827348212892054507309448149472570441448999525537796562349660655721230677554927036679822418148605537452458012647693717687854114726741227872884028096699040224090041501, 8437762304906076716484339420448586972931836153150645409185809426258062813504462508798777349091169295249614154875758463186118815459198475067918910357623913631045795681190410853033494000300337290563141001569224966685581738216493409349677242058063660593426473537140782754662923283229858143411837097164411231120248872366678218782679162075316623751098747253618740619236287688799750823179220159126916407639737280625817766026797635194546886942930598054547953896129671800347203314514734754230309222011026063059791856550618161770603101846436411791245263826099573098206220392152409450475661027823861705226227468222835140518576, 6400958698438203554111442314895334587496449695377735992179174961975438550538165292307054320606101051113985723640802117977214175070426791357388035949394850072903627738430123465147490996945267835407214580542550911834297670883288793133620516281723116372967725893335989647258055019546180342402370622841374871108393774095156176579852523955829644390754640794938383245402112501841589073438699316408279329795611440975462741909161872504256235054016085958630356093300691332332292237987133722894295461760797021334645475048652539291182864008718444442727380327664049488191929211997073224650783914033396575473982025014669155721159, 5357791220517077148804863707703059874628990052947443282786859039109984257205003031089618415383061184166143813366813190446281650751331252696251407147981808399277069021401267041208575112479608036978900469447159045282082120942355505868283056616639812322506228395907604000941625475954890497221760739412977855602377766942277744931785578110202166863642320050991454856553144643137028929188390731337988253510985056571525755168970199884026948375585843008624813971745171713463879543408992915448633559434382634547664884749231622980180360726669138015184814232435641990172452883668423253341086412132294708200946564133157593201164, 1412418665056205886695759730117700972387616438029443472500435272388977585340945079245090172160890880021282979127647998272106154917335000911389651240155886849945852813771390001851058396045415336957542144615599374913539705889554040789136577127308063160801403473084748794285185904462749340369104993295814565559581453816175615170007863619774946053620114964521936927974665250149369756436638211495828062972231262115612289416474769055619469290218019161002379452753056961095708821399428463876720498495115106257243363339331419582143760145795236654788613926249705162599821702984816106898653963884632446587875074552335222674864, 1203211229385945500235134728010977201937344622867858285671132059328127149252264683820522428838242629004264889887288299052383625451809982301076377397556077457785215138148862492177100214547211814744631801070810094769506282345652310651021736276261407065426967345870552778400011416392713056498140813091996058169789005260115329903163164095021866684924708500495530160686129623133371945285905361564213222833176980049534088828731888440301283715625649747883848873924283406023061275406182357901624015465074374515026398630685837996280161384394660428748480439156395392723281247311648615124461675969133044077086732872533813963742, 3709657718110020595802216177598172934623621022369350595788629330957040786854823633136250682355259661344796482259852022223943605063023543595122391227922860260697641825636748237614590305524288786963000396670025811226816205280966323306127850395348780213925698039789002159569343971259449295315497505138064030942635743771777096993970430420189446391454231763831327203961596320051553357135310261313615780907571904170220824203954469453482162370099749190480747673741981162001040916167529217935112449040532958055573970267238144949839317610105878606359235274986758645432081315582548143587750861212510820449222375758394528862780, 261676948347412168584999694615756646244318951485527020930972673457999418926522176631068937091435343344600440513057282472317958428611817431249420889160706873899771108463557747960789982062361898407618701303702819635533442914021636986961749493452255639263874539154640786337367207922254434552518590687075696718415233104123131115165349982581010096803717634746135010046670199977728580810824986359558723993921107846882349325489360655921461298694849663757376273209633326267306408344140486324184753756347968775253743712816723253283539516403927007035026923814037398414874871132581451294353263385897505972897665140127660380971, 7278815325978690849638412766451507107763316620329775891001825813886186989781333381221404811630474909473203221841122418383434876261175065187911173389349116358625425653881392468470696434237209399519028429525925133025050022759344403859440020848138352717827144704957582333198564777140475235911757410676717271783030135397231131817853113441564099723800356887619051261872822588772784573679705744901293162137197620836580179175312222478333275257923264594386508205965581298883850463696860703474263679678892355359906331359559809165841137142274513714882043472173329595988569441027119622999515558540978090150797116336279034423981, 5593262361453030941723993504736881956200744628242811338432155517449078007096901039875412077805097669179955756759463034473647709223981195740743789198485073808495204484615537717967659174885621873863484428044051373134071844003025866707024077106731642611838916754569537861646738597542270793695454998955959779975434984504658016191433166687407765900227146634369001037537444726665465352985171879405765321409634151048647631195034698713811532391028961697908028596782676960089894904815851569345877746424150359069952360120053180782610109006581824022594378390573321220553338614277965644860870649522763964659915750469435660266098, 8056831511560512087462237598974565602431095618674695086354370461055257969921598717200197982562418935012073232438494220004510421848689351958742560995094612386730743479032403199525376793168841305434662209212037223488805902725972873588430920109268984628499267374771080758424595148456623083658026017679111345914176088934475515395893816416530285619944003716805753903299464406991818838483578148234461999015174255790910911439838738258379563889174574515059187459018436167033779245215076758290089401518387635363834566887234031695084826091386930178609407823411857858590153485002017259769656263382902399405175339016375718826351, 7182183242345503247348034759762564816243765886672329694031343942756529908199748204996282952117365782776949924003596359110015421301933731880803539441208605627127741659651530455126831294409264294426851177326293723751242126504203232526896633786410017756047212111809896650928785774518275968447919558829074571108400527809840206147942160388158465067627962728672228720321742802972460410190586607559153499966848592527177236770185058465705903337884675083585435903223938474519006394949156659249680876144263136067515006133468246869898327180048296564077893549425539642196251593332505530588734095103542613993976958971332178032528, 4228209912856491434427932624694497875666930403419583331410540144892835781341835018181836185354029328171408366350869847070451557219410602446157149601740486612034289620673693831416603925791026723166234781026233512584239190855025171060957718580210681984359594782707160123505212868248166261268154502379684440807105458660942734880899821346871851015585309171117488059504783543782571573187858635909208184803321605994660531853438087180164669878161321266532556071598582018669299084811918424077570210738417167595869631006683571266837928413676443774582020391920913472312965825283022942659530289844920656490732813223436756535376, 5190667961576174944072694982402541388655514586648689029264040182551180440369294424894114928523300117373980206911866647256783710610047607845938917360576492412588939028458221839914350319708985513753121200107677041591067907517367190500394275864065758820033620882173637838858381705634795170662805976838943392185601488259722245118487145988429755369636207279161105715565096204900853799874341753573363347962078984639672723185140953062026685448673597656553130099403323323993445882575616195097704786202533803058344295872234510437021079479555755862626765876346217723944480035039539301633950580625081979746473028319956020567166, 1243164472925091447713095402692502592547689266119649685810696758081785276740982995791339330448419138258115361850820213145711172210507108788745370115464126510749684283041397550011666266229585223446162095741981090371536503394555856364155854472238235733145356765010667723378121264640474796162965927070754131452552143383313661569976744146721630472138724115586739477326140022556935383304141615921959879508913369387796085319278783350079837793576363812228613989368208643765837671566767483117038057390512125115176478622034751394207412516615167733816619701103401845218285540395947457508783505368698687203656287189101582045193, 6542114006627975719027119737224724187071337718574565966986172565668057874348583339565061361653736056675098265071989704160178573008978796196142025391670622713635732387806601503627360880043938348271379965454909571966661209470624747750423046713138310909608711065293681654698016655865344403926239609607020327960443568282822267641578715102732029397307586248824469885829829691213789011529030476344651254675087690240009169205720267521532698344663157157589199294288359467168664792325796623828487022672051672963607142624012597555398727018960351227132257182320522984019397814309593188847880561301885756352129780897370741994969, 4292742484310713037382738379153100901972658691078084262341922705471262586355989181057332206256895566788020365278165185302641146351825726777674794026082573784480468240057330300297982487958456675275482108287572762650739796919094513904505927503017675989138363254133733356097435951446290681752269371466325185814120200319049931780529650097564243630811957605264672874651956750319728201108181705379904132558627268157467651624744322247752415850924399717115786730890694784283186823092123143471870406159933392063055794438798743523329321490885376116786025333179769389870384797642316716920566317125363619230246068073938223748494, 219401368320818061103816881504229644813074007506982034641188450917392613331173733461943445047431044003706580528180685234580467318935108859757342757059351152497922307052007845211985054326651103042377377174651414405602408337848724544112217094204686951290429756093929809713003570064391235297805711015027917325050366520397966595426277969940551719092617454351760971636360956727471620515986043539597052013820393591118570138955979043576513832563462273970545900546381004330027782636606260618543653823551130493150827394632766771496524724382930869818307538355057039035921842013140834648823619824119649747548486891105667086440, 3271038841366520006188256603843785720590093674167941893298448414319317975800268309412970499985176057675512084969374517328502844856175062709054860809675181172349682954555291370459776553160649145093483955187617138562594014066273268086557313679473352944055936698235384920024216137229153799716139894839548615458086453687705034254434699186445024470104184291855469478845585249051061329889745259856735028236358097117008297821525559037393662008801467363893347038869470343721817830420072395576715444719644779308255321136339102413307561205493013385212170888551922103130270507229068541653008779605086740958207476130051400502964, 2456155230891852562695919839927763461736444615437636587582551258944927110211806942068087208621074160611770641849721751637935345478769196692688027006435972979663562142567324828416182254288611757621261241428608633176094964994616850932584503728365134536936496662210707202246590755613112358461958693055446170086731386837348337455087750016350364391213119774538400174026199676682261289816566718768290844647267793638572136458497600719447474079352081334863001730710223493077022390717453147297868742446877725752547598874597140691497422270505936751194447576650136894587129965412357481037143574258089880549063150833997685776667, 5882745086848258872558033816373436179595952477805436968068101946372042846876083133844813592881880515556454351026160456068229080798478897486468481959817325406744713069542514202948255558742531315208435274910202177578256299340491679518113082314711170645394204587954350955637254222226420575718779239446773995702883853414755763454105879225704228758101320567015331137748307607627401797060226291609832330620137254031938147332323197038162156090400495356821085684408849900546904637080960546870469068482647004283165195793245901005053548856782915939563806147000671303488137900379591487812398651153380009672221200719788473973218, 1544983186204720012233971043772959457615928773904668703793264009388334440596324684551027134617341678379587817957800992795606261476610347113590605178344338959992428759550879691115433446688701457935449993755592303754323020139304315949515367187074572515658622812038358726195824766388065156892425975977848735181652256346508343871850998765725166455688093847134254912999043404661484707011771354716761128207066264171182964873350582043811780809964872294243048793032590684406184214338368402652212399675393858493984096867618486870704619466351739566594947647069371048149825380953291731199238371922621839396814419741282943629009, 7436650844033850599139160268268078713951656611252900853110971603417207381995029587277856101310998440538593560151706139587025107874588137031263454860891891265576413818734476849615265647438906383275496714762386302748218863193997332507850757821996205529371844975133588243121006764989662795693094822434925926455226831108002148886769944798356921083976576158296731998977242853529271418782907902722204644879030570558292868364913312890932774886663521538222558889064732413266599915945379860297287350660813848382106511762766929966612689072795892279743222409718143036826047710875635344199889429025067473498921847725104401905474, 4520094792541831428028443634962238155046027873139675778047332975650971160992528572312636942564883681324110625694421526512638750541722174577396099771769833740303692387637626461551071275711267782600869942358669950299243866239833309643880922428537271939018552933437333573662906615154695527975862792573681337674299920653913343171607415156180158927805347240675558270335640245130581787091339902612165178400154063802200461359755453022356363307462420711680762694610618326043792793962788687981036533059929092313782017820854632594520414656838344777384976674331027873592326516967793530080405661561894094548142337333944508729324, 8344417008221564147222964899944269190219706496889014764577612384909900660961198181923497588128336496877814538791749755473219733567100492075730290924457270650974816699490893675833248480970134403458209865631849729381741118768554014978835014116864275370701915524852516142944251268159719815693388776467168672753002364040336571491608902724179279125085563780377105638383028956097694509438884493050056163362914369392219462873829711088663347761751838589198376290333152491158922852127803874713124082711205949584909447623882166042486344955328991086267451212602167815160249312287019341348247110584784270524422299197758276233177, 6900575793777603900866480743456426787432500857082901407830057522260842148635103738510522020156808301395371553347695869668803330933633334032558289417026747005850977337876741664581269998240635265635215104023212580011965287917132047559239155585572402224320215953569685644154941988572323678896880927802138986067041504042516158533118465537675301058226112139760917094557169424850934438637841053218101679845425389785457016819026096897930329773564919542374890321657990882183938363826648444847356637225467863913426423008000512222659361097371661607147348075049151396557834968756819751156935382883870858328491577062527732445078, 1039620873456544502792526439053692563154144835379847756378504892556486695893811372496348686040234429241319558386566942949633993286509479433525660703211528073247929219066429684877942418573976874659607403550119970164705963872962022564900892873979929143542730048584191665306869138898715847944721937805038103245129103914480958479618921523447386186168509805632791931086068116198248935672298308230243100580196955728451313725938964425351501171412475747424699269665210309339167573031158405498419018168296646448709143153048088503449978663331342908191879833493443135681045163836717694670471220000514396248007377973312385339724, 7470054329282446464987566606090059811462426737907010584685629849246675942747791612912385984643325345939604013467874016999142427127951005108950475700525540668125074794680112145664898506394897753446948672675481662838013049302627335150200974175696648650777326692346912365323452264939510461349128291141868470499211561276926683501373783782333841097631798292513576034069530903301105938266887072627938474272414795650506821360402394172684411940040086092339545473621240673615537054466086956132870259353118055673366408560504136480848386573221372874886425905788900478612242898970132206377447991221786767100649860140494888691252, 402586505295967619905691072840312493779335883059189597094419908427773884390475146712444916327930405672543666550678142115158300421404418045445262115396372541897650516816803242979853720862777789587197209936299310709424481121412828315741419905631889033420536751788581045359465063767301991224167916510756496045670563145128493494417001678688510299272337718260637160304646772976510411929623713842099669591355816329276513530326957443811236389035007968434194472060894066200603822947428932847324382046154359171880058689186950219622764930900521645422837522020120301079031749943777354436556479348984014074158081422773017344429, 563415937673678313326228187483725710394329785396294818829384243977182814074354940314830423095382742612573997861647718143446138119677389868766367316711406247322828984283892024723846965564520885160731874332445117222587977685554156137595131151468102885725701318636938041492306105096576500134858251709663919443547356064364383377520553574336319571145699171258664474006427403613976015890776865886415686165610970837505144900157729064059079778401775463908397715383769585384744896599460085581039588566179869725128599222665672413843148034696792996069176422046725514869941816476120682513697103886905478620598067865111007638214, 6264171558170135853319244400246873682863464821832291187818309393193945162201349227956437462599067531934951396904287045310504756039169609644468784846371308349116591413208663636416383041466216010356270341549299532423110562786417975240670981647083471199865967894707530938386057961502144576305336509989087868723894494821732948760448594636803954612295582123339452115113695639935682681498785975332367738372429605531518932405658718605881437314458771044654638467285552057040735264564970344018225031797530808832944176003887286565846588331087123906656052577104980222392491832498130606376756392102892579940124531323994973041356, 2353259984204080610194225545041745470089829854097864641866035411574197919718145042882458633681303194230696696437448461645897006566748724423868316510915878385919855584438529309016964796316957554084425090041130406684295448143463557183864986904580491931283427052128639558371950430202157949775211920507501398275682298137803204807425128484838151126784041651105068163531276047578525635596664918372087540317287081064542264455566484399056787275490619623780474771944251109850248376266811618077837209537522980915184699182374776943561962748552430146841092702356546816590614600084173778998145975210290185159573266725929227069797, 934622855869211544962820832783292772587001864016481633549319692118647997365464035742526935162648259530035104052809219385590761480441186611799119613466669910052474575879271777013068409950275118819271965640401715989002186972083540232156167947826249000839292685321721628065384695155838067324265358240071330893787232359259468365148164434154977753368338245369912513394665811580301710559006224827329627076355282410580908081271388693505193839085252723240461425603359426851814557335513554481055068970416054340798137251839192056309530963262959762084997021235759225269150612757109264548475689409264671024573562937371050956945, 40841288761021636035081504620005804587229560547531272508136805673408003215604383809004611855701311115223112605115709593049810264672173558540023314671972835214382106402783762118279584521233115736837819765494338898939471652983572180581907308584658144942283869592172851186231199077015559827655206680253256244042771899973946776714488435723186063576126220739335220510544265560811367391247525457794942530912583087751694416713618377148110119208175754047246129610048382459072266724134533622008051571095186035009538596497573441196582092730514335722135791580631583562572253842816475462260037113557826466531463600577822577182, 5194167723301591230052801202311062157866735904915081465426740746198750008930358064836751025937251639753670761995023333197206327687539110703753911522886716157739831174046019068361151571250792024203569955376201763635555662214478738323877633155588398889092300762510501476335046661463029505382914917782631966235337350109679614459491385866493887048283144029645605953297504926534018927565533631739125447346226726670538409600766693906727046862542380835457909301029612194810314215517635384820588406789302777644163373672264084335029863991962070572891753902948487940575256074525849478375743486686220289464554488663853426257777, 6271352246934455976797775881527917462779314317430283852058699813865422627237142212510017598369001966571683881756351210093308614080865877135241552804057654592113816218350687381234415340503752110818386564991371587895054274788755486865036233770817470206413118178086462394276253477556518575971647180626293577435898333031113655936309925536901257802782468175442927047298878261542124933534175605683359243625843584613665749753138469318900501640625071783818214590797213356657759970529844432851895905792711311693514754962568263023660823886198272522805392577490602668450317589243640841456849368777010601234228020405948443847083, 4821731178298047316711442468332106999270854442323819723845585722463345759704140919237557616179183907220898829243875168017054228442826769190816557217542996585231148296411158529661986640529060922752227093277388138854993220533904177266584574296832359259423699871879700017216845625668994140287618242499265546620783703522566626476780510780530074560982900287233691796896846646738398802319651662960746563876737978008833049837278725322072981128966853961327928789581063966055979141342438050887153505021016595018853626633712350697112978422462943707348105996496244791246583525141684920739961097599878260879488699774921932132062, 6399818591120457913208553954802236713465019937046326368744675340145043793721290241911273492322219603155375874213489728151648124863992933435896068973035610102301243801752479671702175436669868488048545845319142232333236698265473660608201734049482665906533212175948419883833595303534526841525720789460588050251317085997244268814974789292571377987449319164260727769366340737341742562090216144305791418003987911684076272503859590276313567869075763206840280711473677015819143228795811856409362088334677239439076112136461041153210487275000797978892734325026811400894047397076097003622474286288059741856148711497806986431131, 7542155814178254959504773591982822403403864745643248737707320651762699804253567868628136153988005773849555664576532680605616516390581697578355648017928389763896413758238809257758848923043078122373872163704006418978943948940530921798725176726599654342782748808719770205731032084083695209244547645988386719686737804480819763591984834574175987766445547318547256450184389979407091747998898876327996889954949720743514190353823088757373028008841977792574997056469422934895393816053723616496660437820102090577873321040835217262907559657259915054769752384539456629279873778532070749279183983856355074437119970567485970288660, 2455233488932353458082883534912337045417829743259585008612728904797450615841945492931992534352509320621434361811056975179989321651915272492833147028173302499223579762213322754588578893606719993660524105022455469199530331708195132639639030962033424189397073569731374846738861813386346329986250454032749286622481838850808059105459032039709263349667508981492373892403503197726347916204783781382620605455746941504253331887237697572737052995839834326159759348440382765571380267512913102433595812445500294978519993249542565579722989469683433699579845980895001333867098822760847040589336326113160796711133243376985905412440, 2769306888029280481595471794864744736989266590835807696396476317376571712998061705559840255382337792698371824612630572497064046174652240812241207474877176351199169726250685137266944105069267021241905394940332486093326652877783313541543207994497381413148076867018952044585793844301490359127989238430256613789379390552090171381095270828586550759326651198894672920603164598324929883508449726197319840180038010040906493980310809420624846105982881056056806033938668469744609139780426991436223972318573803671682979890411731746542081305815486849829820055798706046070964513541153173891178300237893253294303266376838297392954] here you are given g, n and the bunch of ciphertext\u0026rsquo;s c. So here is the entire exploit script,\nfrom Crypto.Util.number import * from sympy import factorint from gmpy2 import lcm def L(x,n): return (x-1)//n g = 3064483479119078003746764730544409326632988031730244267570606419870241763172042290268790637568853878013120762024676868019161041918635864029486437085080711329770906115917707765495807249869221063627360023708262585149362744121034405972662573990291187157281361626077513326584468446610370515737761794656235787718411868891405879655054951069983051871846737434567477529981308733751055720080442173971719372410703464348456865078946205101041762102043345827882561830737333983788945111204706669750723352244012084616764214800272744427165949976497661393661214767535405002731450556145490105507761711819068432999545435877889723707693 n = 92323032016735545564669921985320000244114757437882665811969290814754961456436884648109047049537997174091217591128908955035057851804628537110209625589730144047166711556723392583795647752685190464911004762110190170169614931319612260910961852393814783406980753711632089394987875359845869446171420929689358873123 c = [5940850133774970843332908436155033568447548625341625881601629465519927159720953942167138274398024196857023660043017108238389240766594717604952439180530568085038511813138583654501176738844164687845301409517402208846403932365774572275541629417265375615844881085658667783670084038116747791403424713777806916884694791618333866204495223796894384829871001167867571031567384150065975063220340252650675925924229187155878619985990912118083304418277703348870019758247161856035400406786082244080001772262100435288386883603832749003432365759629385108576168579530538694189489221774243586184498401968700926459296522505954824658129, 5807060169512354774280115239638653822122920600757328261759853974516873748796175508667023007796296946145166692656058982813298326151581059921642272409921425734071027484655210959102052492583349319715920253214061016501838239584659366059999429365267633619410410975277561166104777474637260629285968200937064820564330940565399375513670415682091626574470629255135636700021760519418849197517116602616600425013115230302515471331863935247085606640703367820105939417171085841987489181370769183676317049661907261070755793012092221727890402066438449120816928941628948870553407960618254669187640445568596182889477340040582199431174, 7547814380444583620893569720512081957793897557742707764197802506826917038806886360991255503331230722616546176206518568205003676114900308140883993500038233924142173303863369524598252853570335427121941018813775139777452024989173149963617253307314766739313549648615847342156565240087317609309958087162103155589356921812709418199916621769839551091694629309759415648635807918839677761132865245242998631225446695215889441674928893114898729034074912407125367388185493682713762791642619376870773334133841304620099016436835302526632114580061637192715149432400155791020813508591054911603041900510479282661959102467039219486180, 7919485431326971559859812057710590023582002478375671078797807147874907341197713059060729623259779030078040430493147450801774357982075328287028026552814120563362058271474202062700072189210335972360499170427377306389246195457194547430722103594130010138840876590204620972106789370827316716254583474194412849960468528740056838294111351990133644066106614488511616935542733248349347092902727646489709888252882647343668606080124099007814053599470586826411749108214357860714480834397664692002714123548064411521312076286128915689116424790081981496918168203090144143477609521363490000109123487462470876431002817959528391683432, 939545072129894576257890657273746873332709279876981270640805402718750568101997223921674331005446965434460173251917495804040342276762588951998948356271985151976367979920761559134377017668623360503574518720007923436398131008321817748555288334752910529600878148478347857217477963757691993136709754843740065018301473517543695094897480468761267167665062522886577663342334369639486104970584960341823578370421333609897217713395661431686637740821263437860176298160409779833732984318517606536308822741446254035209026770449137759033745857244742097910868428847036503232711494845530122628237371096885210539236858694872066445348, 7350842968208247938228806606863076478496922974995129099747429185924621319559239478136202233610787118803410636130547622161771895245603254571262160475810284793822536188715073186886124482802143049339363165787547562567240844025512020499956608926915917918905591440856616076821406254570490578948526093902218407905108878991671800763266375187439178917835234896920464584987452212468189554011049939415862609077073160045775634686680467696697595097474384876004859588749815985345189042292152598103157353323531130256125870519166696129042113507068571955674323141286849733280487479167485308804347201596677332419750266548763638552354, 4847086521082622193057514348662429868791074035720315514587101918917981653046166093589126791433500050418662956274713508010903792291714348246575368874233744558017172105126728825483469519515052481828090102840527027815610535515627616158821217470929817689370419950676702058798137604929610917142685541904579167939519635186038925842240328808991592124878060542619354433181678709014273871726782085500555918918537695298444278173804723809133354270626935352594839898928289034971524169787973213377145546972839190261311677294361016357535121874694646925651268898831568424623209044420323687359930566571016716227852950896553006177132, 6053076696974557109844127063536133372524168559612230687366015157878658802659420745123072067016152505537784013879438511946086309633112320924551999833829035766225320486534201904400880834206258671512353428428722229425485120630366560327512383762072302456812845625797446230112190860579378853292810472416775377476131470487083892872193543517932694466640805624107309024568217290705637071142906267323531842580564643920553828458014955249641967367302739098130394450475168617032532921422280952099310452135110379108861017886700877383657798933200707131314513449264470793832251243622041930003682352098062007154746131262921800579093, 7198857973754330810983610824954388844943613527835560318077049317863826924047760573200835665416272821579028565373771837727115028151865261323911681956429700736067576788939705828696872669610923749079350445268727035363260385221101568663863101697237779288950973277019665229205151398764496620442924708575218181967079423583752328900987478339340016185398615744153608716203618798841736297729065223264359444853124244799831528487466544643900248001303654052720451995371570034901366777808436959674533551004342571628078678467499336596654112255731935285763741976851118283953583669743638419095067407318948360222036635986069869890503, 4648862951490847814623978008361292164943312330292380612099756530061676710863679220361054157140898538923139426591175055860150201627337446154261422943470880102231776114641748319767600428665397364412111725259088487930862284004895427544690644888414173999267598631349466413590651770020899962016220626611935755399603776244732743007452265578543626109867859660752319683262536110306129307605799766924640352527526883902960828623713418545732559668007124244180598827348212892054507309448149472570441448999525537796562349660655721230677554927036679822418148605537452458012647693717687854114726741227872884028096699040224090041501, 8437762304906076716484339420448586972931836153150645409185809426258062813504462508798777349091169295249614154875758463186118815459198475067918910357623913631045795681190410853033494000300337290563141001569224966685581738216493409349677242058063660593426473537140782754662923283229858143411837097164411231120248872366678218782679162075316623751098747253618740619236287688799750823179220159126916407639737280625817766026797635194546886942930598054547953896129671800347203314514734754230309222011026063059791856550618161770603101846436411791245263826099573098206220392152409450475661027823861705226227468222835140518576, 6400958698438203554111442314895334587496449695377735992179174961975438550538165292307054320606101051113985723640802117977214175070426791357388035949394850072903627738430123465147490996945267835407214580542550911834297670883288793133620516281723116372967725893335989647258055019546180342402370622841374871108393774095156176579852523955829644390754640794938383245402112501841589073438699316408279329795611440975462741909161872504256235054016085958630356093300691332332292237987133722894295461760797021334645475048652539291182864008718444442727380327664049488191929211997073224650783914033396575473982025014669155721159, 5357791220517077148804863707703059874628990052947443282786859039109984257205003031089618415383061184166143813366813190446281650751331252696251407147981808399277069021401267041208575112479608036978900469447159045282082120942355505868283056616639812322506228395907604000941625475954890497221760739412977855602377766942277744931785578110202166863642320050991454856553144643137028929188390731337988253510985056571525755168970199884026948375585843008624813971745171713463879543408992915448633559434382634547664884749231622980180360726669138015184814232435641990172452883668423253341086412132294708200946564133157593201164, 1412418665056205886695759730117700972387616438029443472500435272388977585340945079245090172160890880021282979127647998272106154917335000911389651240155886849945852813771390001851058396045415336957542144615599374913539705889554040789136577127308063160801403473084748794285185904462749340369104993295814565559581453816175615170007863619774946053620114964521936927974665250149369756436638211495828062972231262115612289416474769055619469290218019161002379452753056961095708821399428463876720498495115106257243363339331419582143760145795236654788613926249705162599821702984816106898653963884632446587875074552335222674864, 1203211229385945500235134728010977201937344622867858285671132059328127149252264683820522428838242629004264889887288299052383625451809982301076377397556077457785215138148862492177100214547211814744631801070810094769506282345652310651021736276261407065426967345870552778400011416392713056498140813091996058169789005260115329903163164095021866684924708500495530160686129623133371945285905361564213222833176980049534088828731888440301283715625649747883848873924283406023061275406182357901624015465074374515026398630685837996280161384394660428748480439156395392723281247311648615124461675969133044077086732872533813963742, 3709657718110020595802216177598172934623621022369350595788629330957040786854823633136250682355259661344796482259852022223943605063023543595122391227922860260697641825636748237614590305524288786963000396670025811226816205280966323306127850395348780213925698039789002159569343971259449295315497505138064030942635743771777096993970430420189446391454231763831327203961596320051553357135310261313615780907571904170220824203954469453482162370099749190480747673741981162001040916167529217935112449040532958055573970267238144949839317610105878606359235274986758645432081315582548143587750861212510820449222375758394528862780, 261676948347412168584999694615756646244318951485527020930972673457999418926522176631068937091435343344600440513057282472317958428611817431249420889160706873899771108463557747960789982062361898407618701303702819635533442914021636986961749493452255639263874539154640786337367207922254434552518590687075696718415233104123131115165349982581010096803717634746135010046670199977728580810824986359558723993921107846882349325489360655921461298694849663757376273209633326267306408344140486324184753756347968775253743712816723253283539516403927007035026923814037398414874871132581451294353263385897505972897665140127660380971, 7278815325978690849638412766451507107763316620329775891001825813886186989781333381221404811630474909473203221841122418383434876261175065187911173389349116358625425653881392468470696434237209399519028429525925133025050022759344403859440020848138352717827144704957582333198564777140475235911757410676717271783030135397231131817853113441564099723800356887619051261872822588772784573679705744901293162137197620836580179175312222478333275257923264594386508205965581298883850463696860703474263679678892355359906331359559809165841137142274513714882043472173329595988569441027119622999515558540978090150797116336279034423981, 5593262361453030941723993504736881956200744628242811338432155517449078007096901039875412077805097669179955756759463034473647709223981195740743789198485073808495204484615537717967659174885621873863484428044051373134071844003025866707024077106731642611838916754569537861646738597542270793695454998955959779975434984504658016191433166687407765900227146634369001037537444726665465352985171879405765321409634151048647631195034698713811532391028961697908028596782676960089894904815851569345877746424150359069952360120053180782610109006581824022594378390573321220553338614277965644860870649522763964659915750469435660266098, 8056831511560512087462237598974565602431095618674695086354370461055257969921598717200197982562418935012073232438494220004510421848689351958742560995094612386730743479032403199525376793168841305434662209212037223488805902725972873588430920109268984628499267374771080758424595148456623083658026017679111345914176088934475515395893816416530285619944003716805753903299464406991818838483578148234461999015174255790910911439838738258379563889174574515059187459018436167033779245215076758290089401518387635363834566887234031695084826091386930178609407823411857858590153485002017259769656263382902399405175339016375718826351, 7182183242345503247348034759762564816243765886672329694031343942756529908199748204996282952117365782776949924003596359110015421301933731880803539441208605627127741659651530455126831294409264294426851177326293723751242126504203232526896633786410017756047212111809896650928785774518275968447919558829074571108400527809840206147942160388158465067627962728672228720321742802972460410190586607559153499966848592527177236770185058465705903337884675083585435903223938474519006394949156659249680876144263136067515006133468246869898327180048296564077893549425539642196251593332505530588734095103542613993976958971332178032528, 4228209912856491434427932624694497875666930403419583331410540144892835781341835018181836185354029328171408366350869847070451557219410602446157149601740486612034289620673693831416603925791026723166234781026233512584239190855025171060957718580210681984359594782707160123505212868248166261268154502379684440807105458660942734880899821346871851015585309171117488059504783543782571573187858635909208184803321605994660531853438087180164669878161321266532556071598582018669299084811918424077570210738417167595869631006683571266837928413676443774582020391920913472312965825283022942659530289844920656490732813223436756535376, 5190667961576174944072694982402541388655514586648689029264040182551180440369294424894114928523300117373980206911866647256783710610047607845938917360576492412588939028458221839914350319708985513753121200107677041591067907517367190500394275864065758820033620882173637838858381705634795170662805976838943392185601488259722245118487145988429755369636207279161105715565096204900853799874341753573363347962078984639672723185140953062026685448673597656553130099403323323993445882575616195097704786202533803058344295872234510437021079479555755862626765876346217723944480035039539301633950580625081979746473028319956020567166, 1243164472925091447713095402692502592547689266119649685810696758081785276740982995791339330448419138258115361850820213145711172210507108788745370115464126510749684283041397550011666266229585223446162095741981090371536503394555856364155854472238235733145356765010667723378121264640474796162965927070754131452552143383313661569976744146721630472138724115586739477326140022556935383304141615921959879508913369387796085319278783350079837793576363812228613989368208643765837671566767483117038057390512125115176478622034751394207412516615167733816619701103401845218285540395947457508783505368698687203656287189101582045193, 6542114006627975719027119737224724187071337718574565966986172565668057874348583339565061361653736056675098265071989704160178573008978796196142025391670622713635732387806601503627360880043938348271379965454909571966661209470624747750423046713138310909608711065293681654698016655865344403926239609607020327960443568282822267641578715102732029397307586248824469885829829691213789011529030476344651254675087690240009169205720267521532698344663157157589199294288359467168664792325796623828487022672051672963607142624012597555398727018960351227132257182320522984019397814309593188847880561301885756352129780897370741994969, 4292742484310713037382738379153100901972658691078084262341922705471262586355989181057332206256895566788020365278165185302641146351825726777674794026082573784480468240057330300297982487958456675275482108287572762650739796919094513904505927503017675989138363254133733356097435951446290681752269371466325185814120200319049931780529650097564243630811957605264672874651956750319728201108181705379904132558627268157467651624744322247752415850924399717115786730890694784283186823092123143471870406159933392063055794438798743523329321490885376116786025333179769389870384797642316716920566317125363619230246068073938223748494, 219401368320818061103816881504229644813074007506982034641188450917392613331173733461943445047431044003706580528180685234580467318935108859757342757059351152497922307052007845211985054326651103042377377174651414405602408337848724544112217094204686951290429756093929809713003570064391235297805711015027917325050366520397966595426277969940551719092617454351760971636360956727471620515986043539597052013820393591118570138955979043576513832563462273970545900546381004330027782636606260618543653823551130493150827394632766771496524724382930869818307538355057039035921842013140834648823619824119649747548486891105667086440, 3271038841366520006188256603843785720590093674167941893298448414319317975800268309412970499985176057675512084969374517328502844856175062709054860809675181172349682954555291370459776553160649145093483955187617138562594014066273268086557313679473352944055936698235384920024216137229153799716139894839548615458086453687705034254434699186445024470104184291855469478845585249051061329889745259856735028236358097117008297821525559037393662008801467363893347038869470343721817830420072395576715444719644779308255321136339102413307561205493013385212170888551922103130270507229068541653008779605086740958207476130051400502964, 2456155230891852562695919839927763461736444615437636587582551258944927110211806942068087208621074160611770641849721751637935345478769196692688027006435972979663562142567324828416182254288611757621261241428608633176094964994616850932584503728365134536936496662210707202246590755613112358461958693055446170086731386837348337455087750016350364391213119774538400174026199676682261289816566718768290844647267793638572136458497600719447474079352081334863001730710223493077022390717453147297868742446877725752547598874597140691497422270505936751194447576650136894587129965412357481037143574258089880549063150833997685776667, 5882745086848258872558033816373436179595952477805436968068101946372042846876083133844813592881880515556454351026160456068229080798478897486468481959817325406744713069542514202948255558742531315208435274910202177578256299340491679518113082314711170645394204587954350955637254222226420575718779239446773995702883853414755763454105879225704228758101320567015331137748307607627401797060226291609832330620137254031938147332323197038162156090400495356821085684408849900546904637080960546870469068482647004283165195793245901005053548856782915939563806147000671303488137900379591487812398651153380009672221200719788473973218, 1544983186204720012233971043772959457615928773904668703793264009388334440596324684551027134617341678379587817957800992795606261476610347113590605178344338959992428759550879691115433446688701457935449993755592303754323020139304315949515367187074572515658622812038358726195824766388065156892425975977848735181652256346508343871850998765725166455688093847134254912999043404661484707011771354716761128207066264171182964873350582043811780809964872294243048793032590684406184214338368402652212399675393858493984096867618486870704619466351739566594947647069371048149825380953291731199238371922621839396814419741282943629009, 7436650844033850599139160268268078713951656611252900853110971603417207381995029587277856101310998440538593560151706139587025107874588137031263454860891891265576413818734476849615265647438906383275496714762386302748218863193997332507850757821996205529371844975133588243121006764989662795693094822434925926455226831108002148886769944798356921083976576158296731998977242853529271418782907902722204644879030570558292868364913312890932774886663521538222558889064732413266599915945379860297287350660813848382106511762766929966612689072795892279743222409718143036826047710875635344199889429025067473498921847725104401905474, 4520094792541831428028443634962238155046027873139675778047332975650971160992528572312636942564883681324110625694421526512638750541722174577396099771769833740303692387637626461551071275711267782600869942358669950299243866239833309643880922428537271939018552933437333573662906615154695527975862792573681337674299920653913343171607415156180158927805347240675558270335640245130581787091339902612165178400154063802200461359755453022356363307462420711680762694610618326043792793962788687981036533059929092313782017820854632594520414656838344777384976674331027873592326516967793530080405661561894094548142337333944508729324, 8344417008221564147222964899944269190219706496889014764577612384909900660961198181923497588128336496877814538791749755473219733567100492075730290924457270650974816699490893675833248480970134403458209865631849729381741118768554014978835014116864275370701915524852516142944251268159719815693388776467168672753002364040336571491608902724179279125085563780377105638383028956097694509438884493050056163362914369392219462873829711088663347761751838589198376290333152491158922852127803874713124082711205949584909447623882166042486344955328991086267451212602167815160249312287019341348247110584784270524422299197758276233177, 6900575793777603900866480743456426787432500857082901407830057522260842148635103738510522020156808301395371553347695869668803330933633334032558289417026747005850977337876741664581269998240635265635215104023212580011965287917132047559239155585572402224320215953569685644154941988572323678896880927802138986067041504042516158533118465537675301058226112139760917094557169424850934438637841053218101679845425389785457016819026096897930329773564919542374890321657990882183938363826648444847356637225467863913426423008000512222659361097371661607147348075049151396557834968756819751156935382883870858328491577062527732445078, 1039620873456544502792526439053692563154144835379847756378504892556486695893811372496348686040234429241319558386566942949633993286509479433525660703211528073247929219066429684877942418573976874659607403550119970164705963872962022564900892873979929143542730048584191665306869138898715847944721937805038103245129103914480958479618921523447386186168509805632791931086068116198248935672298308230243100580196955728451313725938964425351501171412475747424699269665210309339167573031158405498419018168296646448709143153048088503449978663331342908191879833493443135681045163836717694670471220000514396248007377973312385339724, 7470054329282446464987566606090059811462426737907010584685629849246675942747791612912385984643325345939604013467874016999142427127951005108950475700525540668125074794680112145664898506394897753446948672675481662838013049302627335150200974175696648650777326692346912365323452264939510461349128291141868470499211561276926683501373783782333841097631798292513576034069530903301105938266887072627938474272414795650506821360402394172684411940040086092339545473621240673615537054466086956132870259353118055673366408560504136480848386573221372874886425905788900478612242898970132206377447991221786767100649860140494888691252, 402586505295967619905691072840312493779335883059189597094419908427773884390475146712444916327930405672543666550678142115158300421404418045445262115396372541897650516816803242979853720862777789587197209936299310709424481121412828315741419905631889033420536751788581045359465063767301991224167916510756496045670563145128493494417001678688510299272337718260637160304646772976510411929623713842099669591355816329276513530326957443811236389035007968434194472060894066200603822947428932847324382046154359171880058689186950219622764930900521645422837522020120301079031749943777354436556479348984014074158081422773017344429, 563415937673678313326228187483725710394329785396294818829384243977182814074354940314830423095382742612573997861647718143446138119677389868766367316711406247322828984283892024723846965564520885160731874332445117222587977685554156137595131151468102885725701318636938041492306105096576500134858251709663919443547356064364383377520553574336319571145699171258664474006427403613976015890776865886415686165610970837505144900157729064059079778401775463908397715383769585384744896599460085581039588566179869725128599222665672413843148034696792996069176422046725514869941816476120682513697103886905478620598067865111007638214, 6264171558170135853319244400246873682863464821832291187818309393193945162201349227956437462599067531934951396904287045310504756039169609644468784846371308349116591413208663636416383041466216010356270341549299532423110562786417975240670981647083471199865967894707530938386057961502144576305336509989087868723894494821732948760448594636803954612295582123339452115113695639935682681498785975332367738372429605531518932405658718605881437314458771044654638467285552057040735264564970344018225031797530808832944176003887286565846588331087123906656052577104980222392491832498130606376756392102892579940124531323994973041356, 2353259984204080610194225545041745470089829854097864641866035411574197919718145042882458633681303194230696696437448461645897006566748724423868316510915878385919855584438529309016964796316957554084425090041130406684295448143463557183864986904580491931283427052128639558371950430202157949775211920507501398275682298137803204807425128484838151126784041651105068163531276047578525635596664918372087540317287081064542264455566484399056787275490619623780474771944251109850248376266811618077837209537522980915184699182374776943561962748552430146841092702356546816590614600084173778998145975210290185159573266725929227069797, 934622855869211544962820832783292772587001864016481633549319692118647997365464035742526935162648259530035104052809219385590761480441186611799119613466669910052474575879271777013068409950275118819271965640401715989002186972083540232156167947826249000839292685321721628065384695155838067324265358240071330893787232359259468365148164434154977753368338245369912513394665811580301710559006224827329627076355282410580908081271388693505193839085252723240461425603359426851814557335513554481055068970416054340798137251839192056309530963262959762084997021235759225269150612757109264548475689409264671024573562937371050956945, 40841288761021636035081504620005804587229560547531272508136805673408003215604383809004611855701311115223112605115709593049810264672173558540023314671972835214382106402783762118279584521233115736837819765494338898939471652983572180581907308584658144942283869592172851186231199077015559827655206680253256244042771899973946776714488435723186063576126220739335220510544265560811367391247525457794942530912583087751694416713618377148110119208175754047246129610048382459072266724134533622008051571095186035009538596497573441196582092730514335722135791580631583562572253842816475462260037113557826466531463600577822577182, 5194167723301591230052801202311062157866735904915081465426740746198750008930358064836751025937251639753670761995023333197206327687539110703753911522886716157739831174046019068361151571250792024203569955376201763635555662214478738323877633155588398889092300762510501476335046661463029505382914917782631966235337350109679614459491385866493887048283144029645605953297504926534018927565533631739125447346226726670538409600766693906727046862542380835457909301029612194810314215517635384820588406789302777644163373672264084335029863991962070572891753902948487940575256074525849478375743486686220289464554488663853426257777, 6271352246934455976797775881527917462779314317430283852058699813865422627237142212510017598369001966571683881756351210093308614080865877135241552804057654592113816218350687381234415340503752110818386564991371587895054274788755486865036233770817470206413118178086462394276253477556518575971647180626293577435898333031113655936309925536901257802782468175442927047298878261542124933534175605683359243625843584613665749753138469318900501640625071783818214590797213356657759970529844432851895905792711311693514754962568263023660823886198272522805392577490602668450317589243640841456849368777010601234228020405948443847083, 4821731178298047316711442468332106999270854442323819723845585722463345759704140919237557616179183907220898829243875168017054228442826769190816557217542996585231148296411158529661986640529060922752227093277388138854993220533904177266584574296832359259423699871879700017216845625668994140287618242499265546620783703522566626476780510780530074560982900287233691796896846646738398802319651662960746563876737978008833049837278725322072981128966853961327928789581063966055979141342438050887153505021016595018853626633712350697112978422462943707348105996496244791246583525141684920739961097599878260879488699774921932132062, 6399818591120457913208553954802236713465019937046326368744675340145043793721290241911273492322219603155375874213489728151648124863992933435896068973035610102301243801752479671702175436669868488048545845319142232333236698265473660608201734049482665906533212175948419883833595303534526841525720789460588050251317085997244268814974789292571377987449319164260727769366340737341742562090216144305791418003987911684076272503859590276313567869075763206840280711473677015819143228795811856409362088334677239439076112136461041153210487275000797978892734325026811400894047397076097003622474286288059741856148711497806986431131, 7542155814178254959504773591982822403403864745643248737707320651762699804253567868628136153988005773849555664576532680605616516390581697578355648017928389763896413758238809257758848923043078122373872163704006418978943948940530921798725176726599654342782748808719770205731032084083695209244547645988386719686737804480819763591984834574175987766445547318547256450184389979407091747998898876327996889954949720743514190353823088757373028008841977792574997056469422934895393816053723616496660437820102090577873321040835217262907559657259915054769752384539456629279873778532070749279183983856355074437119970567485970288660, 2455233488932353458082883534912337045417829743259585008612728904797450615841945492931992534352509320621434361811056975179989321651915272492833147028173302499223579762213322754588578893606719993660524105022455469199530331708195132639639030962033424189397073569731374846738861813386346329986250454032749286622481838850808059105459032039709263349667508981492373892403503197726347916204783781382620605455746941504253331887237697572737052995839834326159759348440382765571380267512913102433595812445500294978519993249542565579722989469683433699579845980895001333867098822760847040589336326113160796711133243376985905412440, 2769306888029280481595471794864744736989266590835807696396476317376571712998061705559840255382337792698371824612630572497064046174652240812241207474877176351199169726250685137266944105069267021241905394940332486093326652877783313541543207994497381413148076867018952044585793844301490359127989238430256613789379390552090171381095270828586550759326651198894672920603164598324929883508449726197319840180038010040906493980310809420624846105982881056056806033938668469744609139780426991436223972318573803671682979890411731746542081305815486849829820055798706046070964513541153173891178300237893253294303266376838297392954] print(factorint(n)) p = 9608487498911342475258709905130446784110007980919831673256577866617015685176665542910562376116681809366214190904756211370649126497873239204715605411164189 q = 9608487498911342475258709905130446784110007980919831673256577866617015685176665542910562376116681809366214190904756211370649126497873239204715605411174207 l = lcm(p-1,q-1) u = inverse(L(pow(g,l,pow(n,2)),n),n) flag = b\u0026#34;\u0026#34; for i in c: flag += long_to_bytes((L(pow(i,l,pow(n,2)),n)*u)%n) print(flag) Running the above exploit script, we get the flag: BSDCTF{C0ngr4tzz_bU66y_4s_!_s4!D_w3!rD_y37_34sy!!}\nBig RSA Challenge Description:\nWhy everything seems to be big? Don\u0026rsquo;t bother, you can do it. This is the third challenge that was given in BSides Delhi CTF - 2020. This is a hard level challenge, so as expected it got only one solve that too after releasing the hint. Hint: Looks Like Leet\nYou are given only output file output.txt. So lets the contents of it,\ne1 = 0x3222ce734bbd9f62ee0b3bcccc96af3b9295c705695a1353ecfbab8176eb533a2cb7af3948d28271de99ae776bbecfc168b8466ec39ee728bf386827edd3cfd3aa93f0bc8336002ec7625c5d39d8eb5dde71682652039ea879b46a8838158f5d3414357a2ed60ce1f30ab6b872999073dd91f30ae6b00374fc57faf1089aa99855993830f5cbdbc853fc4f8372c08eb558a44f9e4fc6e082212dfe13fe36609e872d31524bc58e4cc9cabd95f82e360380d8dd757d00ce65142ffc6f0da94a53f6e580b01e3d965aca15a81d30652489d7de18bf16d7e4a74701c0a508dccc2420a3a4d34279afef1f35ef1258128aec2ed3642b27119d6cb55b35efb8de131d n1 = 0x5f7003917cb1070dbef61d56de6cdf8770e9ac1f2a11a7c08e2fa7275bd84fe0d46217d7ededca59d50c992cd6354b53bad8d35687b126496893ba9addc3df3ea052352a371ecf20c951cee2f2fac7e43f38e2cb651dcce0f887cad3de45b8fd29a0c981b57ff43c98dc5a762bc4a595cdfcfd38ab095ce4fa00ac80872981421b0a86778baff9b4e2f631e39a4d3dd0ff8a97e4693b9b847404879449e69212e60f2f62d6325b11980e6303ca83a95aa09a6c94d02d431355369b1714bda0bb6ed9135d72f12b36215ed8954835b041b7d62d7d50af6bdd5b9c31d02a29e77c597e36618b545748498c95d3fab8b7b6ba9bd2340af66e63a34ab7cab5856891 c1 = 0x16e28f370a96654c2bdaea5634311aa6e71d9064eb642ef29b42fe49d6e0d5fd2ee1804b0fefb343a47f8524a5fe32bbb34969f1a5a3c6f8c415544065832cc3ee34f312d022a5f2416c102ec0fcf2dc297eba3e2d15fe4c6cdf02ad7f5b197e430c1dd3e99177d2ce6e0f4984a33f47de4b957d4a639857c69c6ce2024ba7b7323aefa49880f67429b24c033278095570d0722f88be5deb69ccdcd188b7f5dc7c6cfd977ae973f5e8fc7cb1c85cf3d288a83fcb81180831c0fd20b8ce93045327fec2273fe807eaab355b7cda5256acda4e865a8db7722c853c86f63462a162fb13b70a2ebb9870df2b7607d7481c7ae8ce5f6300b05f992cbcca1e81d55287 e2 = 0x67fe4657cdb5a2ddc28d034f9ac4ae2ffe3eea356c5372bfbcd6c697748ea8b4e89dc27a99bc2fc42e408462de60aa6ea71542eb388919ce15f42b270dd287723177f2c272339b730f412d54bee7cd53e75c7b6493e49c6dff6d678f4d40faea8a1489a46c4f07c7f9e8ebd5cb6058a93597cf0d46a3c3708f079630a910d48ccb1223f0c621cbd250d858012d496c23553ad21a58e2d93b1ddf235e35766a0d214109fb039e9381d2944344f62f5071e4ae6bcae3cc9a3dea01903d89b2b5e7e7ceac032b1ecf3cd066c8a476039fb1c8e0e4efcf2500f77f56b8d5d06ca283bce4af2a046b8bf0a5f51cb270850578fbc479e60acd9570ee278dc45804c78d n2 = 0xe78abf92c74ee182be6f9678d90dcc3deb1b97ac9540ac28ca443666d00250683e10996271ef71cd4da6a73a1e751625a2dbaaae7d3019183db5201508007fd4db547f64a415e4616d24dba839b2bb6c63ef67f5cefbfd694edd68706592aab8219a7e7ad57f57702974f075d89bc4956f2be8c030a473332d94c990ff0ef50f5eadaef126a8de78cc8a44a97f75496eb9bc12a2ab28189596b37b6981e6bc8af032a1c623bcadf715e2f5d243594f3fba8eb4a1fd40a0920d7c1eb61d480ae383e852e3bddcff961a76a6959fb05707ba56e47fc65f2a6e4061c7e8b0fc292d08ab82fd449def9edff1d508d57593da26316e75f4a70c375aaf40db55e6ada5 c2 = 0xe1386d9323960d621bd6bdfef8dae71c285f5efb0e2347614bb81f48e728bbc538c7583b83274c65e245255bca500e6eca4ea43c165a2d6d4a559c113d8d91cd9255a0f858be297416fdea0c381350c28fc343621106f471bac3047e3c51093e22818aa58ed8c40e14d7e9b94d2bb3014b8255a7144f8ac71148e045d8f9d7ba89d439694a1dd3af93d72d50dba0492093ba55adc37ed75b662e38455bdbc94a582c6c394c5a64d1c5e1d6c46338bdb95cafebe6fddb565245b1290d15c005c70b7c85eea8210f14e7328e52224c9aab954e6e831943eed8118cbaa054a32539dfa80884c97b0c8a63ab67752a96e473154f9cf3997ecb4a8bca836413e16e0d e3 = 0x6a2c1840124b9da8088b02a6f8853df716b0acee1215f99d5cf664a84f04fc87837e98fd3ef2c1047188e93613b46ffad6c03e94547c79487c9241edb0a09e1814644a8f9571e75e590f4b7354bffac68dd1c49655d0e5cd08aa7999cc2cacfe191c8b9a707e0b86077f7a73a0c193d2af0b0e163a09646eabe2806e9067c180f26cffe78537e53e1dabd75eedddea3706988093fa93712b0b89a28e91baecb4c81b064892af9479ba2aa304b9277558ec97947e2d90e71635f19b4489d46b2547078e9d9f60ddf5f8bdf0f7ec8269534c7a439833d5b7c600e4c2dbe2e213a596d9b20547dd61d83a36fc5a36dedcc9e8b7edc192bebb039b4c821c26685085 n3 = 0xc218c635da2c9bd0760f3aa7e90621c978c2e02e60d23c20aaa567f1abab35a62a175875ce1f9fc37d44245572adb3bc30ae564877c123227e7d50d51431f46d25ca223398996171dbdafca030ff8903511bd439bb3716549448cac2f9f53e62540781a85b5066ea5ab30c94b8f12f318ae6ca46f376dfc7828d2004a2df3abbb8701209b217be4494dd8e8894d4d4b93d4a770db6723a43076dd0abb75d8a4bdb6630e6c223fdc288b29c3679e3061c3d07d589ae069160174214c469dd8fc820f996dd6df554855da3e259d80ae7028cac5e5b01f8a1d5e88dcda4a045e62d4797558d04df883bebc6a87506b6cf248f87e5f6ff2c3e6d85591ee6ee1af50b c3 = 0xba6043f974e916da2c0a8c343f83d32773e005f52bcba452bc7a36a9f65c6758afc5b5878ba16ca5a2a100982436fa759020fbc153d2dd687999fd412ee8f6e34542731edb6bc87748d749a681ec6c0483a7b08f33d0ab61c8221826b75a10d376a8d922870560d655e67d9ccfce8ed447c18f3d16d553c8204c8559ef8b01342bb0b876491c380eb3349fe423a14fcb5ea6a15d1d1c25741bc43adbde3d0c35dec1e535e345aef210cd1f80e17b74b6ece186ee9948d00d5b5ec61e8ce9c4307657623fc77ba08875579a8658faf86677318f3196ffacbe6f0a0c6c962449bd52e69e9a3988a782e1bdab354e51f260cec8351900fd16f8615562465e2446cb Looks like Hastad\u0026rsquo;s Broadcast Attack? but it isn\u0026rsquo;t, try it! Also, from the hint we can understand that this challenge is related to Lenstra –Lenstra -Lov ́asz i.e., LLL lattice reduction technique should be used to solve this challenge. I got many queries regarding this challenge, they\u0026rsquo;ve tried almost all attacks based on LLL. After trying with all the attacks one must understand that it has common private exponent. Since you are given 3 public keys and respective ciphertexts. So this Lattice Based Common Private Exponent Attack.\nThe Attack Let M = sqrt(N). Assume that you are given r public keys ((e_1,N_1)), \u0026hellip; ((e_r,N_r)), we begin by considering the r key equations\n[M e1 .. er 0 -N1 .. 0 0 0 -N2 . 0] i.e.,\nM = matrix(ZZ, 4, 4) M[0, 0] = n3^0.5 M[0, 1] = e1 M[1, 1] = -n1 M[0, 2] = e2 M[2, 2] = -n2 M[0, 3] = e3 M[3, 3] = -n3 S = M.LLL() d = abs(S[0][0])/M[0][0] Applying LLL algorithm, with the above matrix as input, we obtain a reduced basis whose smallest basis vector is\nf the attack is successful, we expect the first component of basis vector must be equal to M[0,0]*d where d is common private exponent. that\u0026rsquo;s it we got the private key with which we can find the plaintext / flag. Here is my entire expoit written in sage,\nfrom Crypto.Util.number import long_to_bytes e1 = 0x3222ce734bbd9f62ee0b3bcccc96af3b9295c705695a1353ecfbab8176eb533a2cb7af3948d28271de99ae776bbecfc168b8466ec39ee728bf386827edd3cfd3aa93f0bc8336002ec7625c5d39d8eb5dde71682652039ea879b46a8838158f5d3414357a2ed60ce1f30ab6b872999073dd91f30ae6b00374fc57faf1089aa99855993830f5cbdbc853fc4f8372c08eb558a44f9e4fc6e082212dfe13fe36609e872d31524bc58e4cc9cabd95f82e360380d8dd757d00ce65142ffc6f0da94a53f6e580b01e3d965aca15a81d30652489d7de18bf16d7e4a74701c0a508dccc2420a3a4d34279afef1f35ef1258128aec2ed3642b27119d6cb55b35efb8de131d n1 = 0x5f7003917cb1070dbef61d56de6cdf8770e9ac1f2a11a7c08e2fa7275bd84fe0d46217d7ededca59d50c992cd6354b53bad8d35687b126496893ba9addc3df3ea052352a371ecf20c951cee2f2fac7e43f38e2cb651dcce0f887cad3de45b8fd29a0c981b57ff43c98dc5a762bc4a595cdfcfd38ab095ce4fa00ac80872981421b0a86778baff9b4e2f631e39a4d3dd0ff8a97e4693b9b847404879449e69212e60f2f62d6325b11980e6303ca83a95aa09a6c94d02d431355369b1714bda0bb6ed9135d72f12b36215ed8954835b041b7d62d7d50af6bdd5b9c31d02a29e77c597e36618b545748498c95d3fab8b7b6ba9bd2340af66e63a34ab7cab5856891 c1 = 0x16e28f370a96654c2bdaea5634311aa6e71d9064eb642ef29b42fe49d6e0d5fd2ee1804b0fefb343a47f8524a5fe32bbb34969f1a5a3c6f8c415544065832cc3ee34f312d022a5f2416c102ec0fcf2dc297eba3e2d15fe4c6cdf02ad7f5b197e430c1dd3e99177d2ce6e0f4984a33f47de4b957d4a639857c69c6ce2024ba7b7323aefa49880f67429b24c033278095570d0722f88be5deb69ccdcd188b7f5dc7c6cfd977ae973f5e8fc7cb1c85cf3d288a83fcb81180831c0fd20b8ce93045327fec2273fe807eaab355b7cda5256acda4e865a8db7722c853c86f63462a162fb13b70a2ebb9870df2b7607d7481c7ae8ce5f6300b05f992cbcca1e81d55287 e2 = 0x67fe4657cdb5a2ddc28d034f9ac4ae2ffe3eea356c5372bfbcd6c697748ea8b4e89dc27a99bc2fc42e408462de60aa6ea71542eb388919ce15f42b270dd287723177f2c272339b730f412d54bee7cd53e75c7b6493e49c6dff6d678f4d40faea8a1489a46c4f07c7f9e8ebd5cb6058a93597cf0d46a3c3708f079630a910d48ccb1223f0c621cbd250d858012d496c23553ad21a58e2d93b1ddf235e35766a0d214109fb039e9381d2944344f62f5071e4ae6bcae3cc9a3dea01903d89b2b5e7e7ceac032b1ecf3cd066c8a476039fb1c8e0e4efcf2500f77f56b8d5d06ca283bce4af2a046b8bf0a5f51cb270850578fbc479e60acd9570ee278dc45804c78d n2 = 0xe78abf92c74ee182be6f9678d90dcc3deb1b97ac9540ac28ca443666d00250683e10996271ef71cd4da6a73a1e751625a2dbaaae7d3019183db5201508007fd4db547f64a415e4616d24dba839b2bb6c63ef67f5cefbfd694edd68706592aab8219a7e7ad57f57702974f075d89bc4956f2be8c030a473332d94c990ff0ef50f5eadaef126a8de78cc8a44a97f75496eb9bc12a2ab28189596b37b6981e6bc8af032a1c623bcadf715e2f5d243594f3fba8eb4a1fd40a0920d7c1eb61d480ae383e852e3bddcff961a76a6959fb05707ba56e47fc65f2a6e4061c7e8b0fc292d08ab82fd449def9edff1d508d57593da26316e75f4a70c375aaf40db55e6ada5 c2 = 0xe1386d9323960d621bd6bdfef8dae71c285f5efb0e2347614bb81f48e728bbc538c7583b83274c65e245255bca500e6eca4ea43c165a2d6d4a559c113d8d91cd9255a0f858be297416fdea0c381350c28fc343621106f471bac3047e3c51093e22818aa58ed8c40e14d7e9b94d2bb3014b8255a7144f8ac71148e045d8f9d7ba89d439694a1dd3af93d72d50dba0492093ba55adc37ed75b662e38455bdbc94a582c6c394c5a64d1c5e1d6c46338bdb95cafebe6fddb565245b1290d15c005c70b7c85eea8210f14e7328e52224c9aab954e6e831943eed8118cbaa054a32539dfa80884c97b0c8a63ab67752a96e473154f9cf3997ecb4a8bca836413e16e0d e3 = 0x6a2c1840124b9da8088b02a6f8853df716b0acee1215f99d5cf664a84f04fc87837e98fd3ef2c1047188e93613b46ffad6c03e94547c79487c9241edb0a09e1814644a8f9571e75e590f4b7354bffac68dd1c49655d0e5cd08aa7999cc2cacfe191c8b9a707e0b86077f7a73a0c193d2af0b0e163a09646eabe2806e9067c180f26cffe78537e53e1dabd75eedddea3706988093fa93712b0b89a28e91baecb4c81b064892af9479ba2aa304b9277558ec97947e2d90e71635f19b4489d46b2547078e9d9f60ddf5f8bdf0f7ec8269534c7a439833d5b7c600e4c2dbe2e213a596d9b20547dd61d83a36fc5a36dedcc9e8b7edc192bebb039b4c821c26685085 n3 = 0xc218c635da2c9bd0760f3aa7e90621c978c2e02e60d23c20aaa567f1abab35a62a175875ce1f9fc37d44245572adb3bc30ae564877c123227e7d50d51431f46d25ca223398996171dbdafca030ff8903511bd439bb3716549448cac2f9f53e62540781a85b5066ea5ab30c94b8f12f318ae6ca46f376dfc7828d2004a2df3abbb8701209b217be4494dd8e8894d4d4b93d4a770db6723a43076dd0abb75d8a4bdb6630e6c223fdc288b29c3679e3061c3d07d589ae069160174214c469dd8fc820f996dd6df554855da3e259d80ae7028cac5e5b01f8a1d5e88dcda4a045e62d4797558d04df883bebc6a87506b6cf248f87e5f6ff2c3e6d85591ee6ee1af50b c3 = 0xba6043f974e916da2c0a8c343f83d32773e005f52bcba452bc7a36a9f65c6758afc5b5878ba16ca5a2a100982436fa759020fbc153d2dd687999fd412ee8f6e34542731edb6bc87748d749a681ec6c0483a7b08f33d0ab61c8221826b75a10d376a8d922870560d655e67d9ccfce8ed447c18f3d16d553c8204c8559ef8b01342bb0b876491c380eb3349fe423a14fcb5ea6a15d1d1c25741bc43adbde3d0c35dec1e535e345aef210cd1f80e17b74b6ece186ee9948d00d5b5ec61e8ce9c4307657623fc77ba08875579a8658faf86677318f3196ffacbe6f0a0c6c962449bd52e69e9a3988a782e1bdab354e51f260cec8351900fd16f8615562465e2446cb M = matrix(ZZ, 4, 4) M[0, 0] = n3^0.5 M[0, 1] = e1 M[1, 1] = -n1 M[0, 2] = e2 M[2, 2] = -n2 M[0, 3] = e3 M[3, 3] = -n3 S = M.LLL() d = abs(S[0][0])/M[0][0] print(d) print(long_to_bytes((pow(c2, d, n2)))) # can be any ciphertext and modulus Running the above script(remember that it is written in sage) using we get the flag: BSDCTF{c0mm0n_pr1v473_3xp0n3n7_4774ck}.\nIf you have any queries related to any crypto challenge from BSides Delhi CTF - 2020 you can ping me via twitter.\nAll Hail Cryptography!\n","permalink":"https://malladisiddu.github.io/posts/bsides-delhi-ctf-2020/","summary":"This year my team c0d3_h4cki05_ got the opportunity to host BSides Delhi CTF. We organized the CTF on October 10th which is a 10 hour CTF (13.00 - 22.00 IST). Also this is a begginer friendly CTF. I\u0026rsquo;m happy that it went well. Yay! I authored three challenges for this CTF which are of difficulty ranging from easy, medium and hard. This blog post is to cover the intended solutions to all the 3 crypto challenges.","title":"BSides Delhi CTF - 2020"},{"content":" I thoroughly enjoyed playing FwordCTF-2020, but I could manage to play only for 7 hours.\nRandomness Randomness.py\nGiven an encryption file in which the output is commented,\nfrom Crypto.Util.number import * from random import * flag=\u0026#34;TODO\u0026#34; p=getPrime(64) a=getrandbits(64) b=getrandbits(64) X=[] X.append((a*getrandbits(64)+b)%p) c=0 while c\u0026lt;len(flag): X.append((a*X[c]+b)%p) c+=1 output=[] for i in range(len(flag)): output.append(ord(flag[i])^X[i]) print (output) #output:[6680465291011788243L, 5100570103593250421L, 5906808313299165060L, 1965917782737693358L, 9056785591048864624L, 1829758495155458576L, 6790868899161600055L, 1596515234863242823L, 1542626304251881891L, 8104506805098882719L, 1007224930233032567L, 3734079115803760073L, 7849173324645439452L, 8732100672289854567L, 5175836768003400781L, 1424151033239111460L, 1199105222454059911L, 1664215650827157105L, 9008386209424299800L, 484211781780518254L, 2512932525834758909L, 270126439443651096L, 3183206577049996011L, 3279047721488346724L, 3454276445316959481L, 2818682432513461896L, 1198230090827197024L, 6998819122186572678L, 9203565046169681246L, 2238598386754583423L, 467098371562174956L, 5653529053698720276L, 2015452976526330232L, 2551998512666399199L, 7069788985925185031L, 5960242873564733830L, 8674335448210427234L, 8831855692621741517L, 6943582577462564728L, 2159276184039111694L, 8688468346396385461L, 440650407436900405L, 6995840816131325250L, 4637034747767556143L, 3074066864500201630L, 3089580429060692934L, 2636919931902761401L, 5048459994558771200L, 6575450200614822046L, 666932631675155892L, 3355067815387388102L, 3494943856508019168L, 3208598838604422062L, 1651654978658074504L, 1031697828323732832L, 3522460087077276636L, 6871524519121580258L, 6523448658792083486L, 127306226106122213L, 147467006327822722L, 3241736541061054362L, 8781435214433157730L, 7267936298215752831L, 3411059229428517472L, 6597995245035183751L, 1256684894889830824L, 6272257692365676430L, 303437276610446361L, 8730871523914292433L, 6472487383860532571L, 5022165523149187811L, 4462701447753878703L, 1590013093628585660L, 4874224067795612706L] The idea to solve the challenge is very simple, if we can find X and XOR it with the given output we get the flag.\nAfter going through the code, I got to know that it involves randombits, the topic which I\u0026rsquo;ve never solved any challenge based on it. But I know that it is related to Pseudo Random Number Generator(PRNG). Anyways, lets break the code into parts and understand it. First lets understand the final part of the code,\noutput=[] for i in range(len(flag)): output.append(ord(flag[i])^X[i]) print (output) We understood that, flag and an array X were XORed and appended to output array. Here, we only know output, X \u0026amp; flag are yet to be found. Guess what? Since we know the flag format we can find some values of X,\nflag = \u0026#34;FwordCTF{\u0026#34; output = [6680465291011788243, 5100570103593250421, 5906808313299165060, 1965917782737693358, 9056785591048864624, 1829758495155458576, 6790868899161600055, 1596515234863242823, 1542626304251881891, 8104506805098882719, 1007224930233032567, 3734079115803760073, 7849173324645439452, 8732100672289854567, 5175836768003400781, 1424151033239111460, 1199105222454059911, 1664215650827157105, 9008386209424299800, 484211781780518254, 2512932525834758909, 270126439443651096, 3183206577049996011, 3279047721488346724, 3454276445316959481, 2818682432513461896, 1198230090827197024, 6998819122186572678, 9203565046169681246, 2238598386754583423, 467098371562174956, 5653529053698720276, 2015452976526330232, 2551998512666399199, 7069788985925185031, 5960242873564733830, 8674335448210427234, 8831855692621741517, 6943582577462564728, 2159276184039111694, 8688468346396385461, 440650407436900405, 6995840816131325250, 4637034747767556143, 3074066864500201630, 3089580429060692934, 2636919931902761401, 5048459994558771200, 6575450200614822046, 666932631675155892, 3355067815387388102, 3494943856508019168, 3208598838604422062, 1651654978658074504, 1031697828323732832, 3522460087077276636, 6871524519121580258, 6523448658792083486, 127306226106122213, 147467006327822722, 3241736541061054362, 8781435214433157730, 7267936298215752831, 3411059229428517472, 6597995245035183751, 1256684894889830824, 6272257692365676430, 303437276610446361, 8730871523914292433, 6472487383860532571,5022165523149187811, 4462701447753878703, 1590013093628585660, 4874224067795612706] X = [] for i in range(len(flag)): X.append(ord(flag[i])^output[i]) Here is the output,\nIn [2]: X Out[2]: [6680465291011788181, 5100570103593250306, 5906808313299165163, 1965917782737693404, 9056785591048864532, 1829758495155458643, 6790868899161600099, 1596515234863242753, 1542626304251881944] Now lets find the remaining values of X by analysing the code involved in forming it,\np=getPrime(64) a=getrandbits(64) b=getrandbits(64) X=[] X.append((a*getrandbits(64)+b)%p) c=0 while c\u0026lt;len(flag): X.append((a*X[c]+b)%p) c+=1 We understood that p is a random prime number, a \u0026amp; b are any two random numbers. Also we can understand that, this a*getrandbits(64)+b)%p is the part which is producing X[i]. But at first it seeded an initial value into X. Now, for any noob like me two questions will arise,\n[1] What is the type of PRNG used?\n[2] How to crack it?\nSo, I have googled for list of PRNG\u0026rsquo;s. I got the list here. My idea is to google each Random Number Generator(RNG) and finding similarity to our code. Fortunately, I found it. It is Linear Congruential Generator(LCG).\nThis equation confirmed me that it is an LCG,\n$$ (X_{n+1}) = (aX_{n}+c)\\pmod m $$\nCracking LCG I have referred to many articles to find the answer for the 2nd question, and I got to know that LCG is the easiest of all PRNG\u0026rsquo;s for both implementing \u0026amp; cracking. Let\u0026rsquo;s crack it, Let us understand the terminology here,\np - modulus\na - multiplier\nb - increment\nUnfortunately, We don\u0026rsquo;t the values of all the three. Let us understand this a*getrandbits(64)+b)%p working,\ns1 = s0*a + b (mod p) s2 = s1*a + b (mod p) s3 = s2*a + b (mod p) Its feeding back the intial seed to find the next one. Next one to find the next one \u0026amp; so on. Let us rearrange the equations a bit,\ns1 - (s0*a + b) = k_1 * p s2 - (s1*a + b) = k_2 * p s3 - (s2*a + b) = k_3 * p Its unreal to solve 3 equations with 6 unknowns, but number theory made it real by using simple property i.e., if we have few random multiples of p, with large probability their gcd will be equal to p. Let us manipulate the above equations a bit,\nt0 = s1 - s0 t1 = s2 - s1 = (s1*a + b) - (s0*a + b) = a*(s1 - s0) = a*t0 (mod p) t2 = s3 - s2 = (s2*a + b) - (s1*a + b) = a*(s2 - s1) = a*t1 (mod p) t3 = s4 - s3 = (s3*a + b) - (s2*a + b) = a*(s3 - s2) = a*t2 (mod p) Final equation to solve this is,\nt2*t0 - t1*t1 = (a*a*t0 * t0) - (a*t0 * a*t0) = 0 (mod p) Let us define python function to crack the modulus,\ndef crack_unknown_modulus(states): diffs = [s1 - s0 for s0, s1 in zip(states, states[1:])] zeroes = [t2*t0 - t1*t1 for t0, t1, t2 in zip(diffs, diffs[1:], diffs[2:])] modulus = abs(reduce(gcd, zeroes)) return modulus Now we got the modulus, its pretty simple to find multiplier \u0026amp; increment. Let us consider the first two equations and subtract them\ns1 = x0*a + b (mod p) s_2 = x1*a + b (mod p) s_2 - s_1 = s1*a - s0*a (mod p) s_2 - s_1 = a*(s1 - s0) (mod p) a = (s_2 - s_1)/(s_1 - s_0) (mod p) that\u0026rsquo;s it we got a and now b can be retrieved by by using only one equation as we know all other values in the equation. Consider the first equation,\ns1 = s0*a + b (mod p) After rearranging,\nb = s1 - s0*a (mod p) Let us put this in a function,\ndef crack_lcg(seeds): a = ((seeds[2] - seeds[1]) * invert(seeds[1] - seeds[0], p)) % p return a, (seeds[1] - seeds[0]*a) % p Final Exploit Wrapping up everything from all the understanding we got from the above discussion,\nfrom functools import reduce from gmpy2 import gcd,gcdext,invert def crack_lcg(seeds): a = ((seeds[2] - seeds[1]) * invert(seeds[1] - seeds[0], p)) % p return a, (seeds[1] - seeds[0]*a) % p def crack_unknown_modulus(states): diffs = [s1 - s0 for s0, s1 in zip(states, states[1:])] zeroes = [t2*t0 - t1*t1 for t0, t1, t2 in zip(diffs, diffs[1:], diffs[2:])] modulus = abs(reduce(gcd, zeroes)) return modulus flag = \u0026#34;FwordCTF{\u0026#34; output = [6680465291011788243, 5100570103593250421, 5906808313299165060, 1965917782737693358, 9056785591048864624, 1829758495155458576, 6790868899161600055, 1596515234863242823, 1542626304251881891, 8104506805098882719, 1007224930233032567, 3734079115803760073, 7849173324645439452, 8732100672289854567, 5175836768003400781, 1424151033239111460, 1199105222454059911, 1664215650827157105, 9008386209424299800, 484211781780518254, 2512932525834758909, 270126439443651096, 3183206577049996011, 3279047721488346724, 3454276445316959481, 2818682432513461896, 1198230090827197024, 6998819122186572678, 9203565046169681246, 2238598386754583423, 467098371562174956, 5653529053698720276, 2015452976526330232, 2551998512666399199, 7069788985925185031, 5960242873564733830, 8674335448210427234, 8831855692621741517, 6943582577462564728, 2159276184039111694, 8688468346396385461, 440650407436900405, 6995840816131325250, 4637034747767556143, 3074066864500201630, 3089580429060692934, 2636919931902761401, 5048459994558771200, 6575450200614822046, 666932631675155892, 3355067815387388102, 3494943856508019168, 3208598838604422062, 1651654978658074504, 1031697828323732832, 3522460087077276636, 6871524519121580258, 6523448658792083486, 127306226106122213, 147467006327822722, 3241736541061054362, 8781435214433157730, 7267936298215752831, 3411059229428517472, 6597995245035183751, 1256684894889830824, 6272257692365676430, 303437276610446361, 8730871523914292433, 6472487383860532571,5022165523149187811, 4462701447753878703, 1590013093628585660, 4874224067795612706] X = [] for i in range(len(flag)): X.append(ord(flag[i])^output[i]) p = crack_unknown_modulus(X) a, b = crack_lcg(X) for i in range(1,len(X)): assert X[i] == (X[i-1]*a + b) % p s = [] s.append(X[0]) for i in range(1,len(output)): s.append((s[i-1]*a + b)%p) flag = \u0026#34;\u0026#34; for i in range(len(output)): flag+= chr(s[i]^output[i]) print(\u0026#34;[+] Flag: \u0026#34;,flag) Flag: FwordCTF{LCG_easy_to_break!That_was_a_mistake_choosing_it_as_a_secure_way}\nYou can find my entire exploit here. If you have any queries, feedback, suggestions either you can put them in comment section or you can ping me via twitter @st0ic3r.\nAlright, See you next time\nBu, Bye !\n","permalink":"https://malladisiddu.github.io/posts/fwordctf-2020-writeups/","summary":"I thoroughly enjoyed playing FwordCTF-2020, but I could manage to play only for 7 hours.\nRandomness Randomness.py\nGiven an encryption file in which the output is commented,\nfrom Crypto.Util.number import * from random import * flag=\u0026#34;TODO\u0026#34; p=getPrime(64) a=getrandbits(64) b=getrandbits(64) X=[] X.append((a*getrandbits(64)+b)%p) c=0 while c\u0026lt;len(flag): X.append((a*X[c]+b)%p) c+=1 output=[] for i in range(len(flag)): output.append(ord(flag[i])^X[i]) print (output) #output:[6680465291011788243L, 5100570103593250421L, 5906808313299165060L, 1965917782737693358L, 9056785591048864624L, 1829758495155458576L, 6790868899161600055L, 1596515234863242823L, 1542626304251881891L, 8104506805098882719L, 1007224930233032567L, 3734079115803760073L, 7849173324645439452L, 8732100672289854567L, 5175836768003400781L, 1424151033239111460L, 1199105222454059911L, 1664215650827157105L, 9008386209424299800L, 484211781780518254L, 2512932525834758909L, 270126439443651096L, 3183206577049996011L, 3279047721488346724L, 3454276445316959481L, 2818682432513461896L, 1198230090827197024L, 6998819122186572678L, 9203565046169681246L, 2238598386754583423L, 467098371562174956L, 5653529053698720276L, 2015452976526330232L, 2551998512666399199L, 7069788985925185031L, 5960242873564733830L, 8674335448210427234L, 8831855692621741517L, 6943582577462564728L, 2159276184039111694L, 8688468346396385461L, 440650407436900405L, 6995840816131325250L, 4637034747767556143L, 3074066864500201630L, 3089580429060692934L, 2636919931902761401L, 5048459994558771200L, 6575450200614822046L, 666932631675155892L, 3355067815387388102L, 3494943856508019168L, 3208598838604422062L, 1651654978658074504L, 1031697828323732832L, 3522460087077276636L, 6871524519121580258L, 6523448658792083486L, 127306226106122213L, 147467006327822722L, 3241736541061054362L, 8781435214433157730L, 7267936298215752831L, 3411059229428517472L, 6597995245035183751L, 1256684894889830824L, 6272257692365676430L, 303437276610446361L, 8730871523914292433L, 6472487383860532571L, 5022165523149187811L, 4462701447753878703L, 1590013093628585660L, 4874224067795612706L] The idea to solve the challenge is very simple, if we can find X and XOR it with the given output we get the flag.","title":"FwordCTF 2020"},{"content":" First things first, Arab Security Cyber Wargames is a qualifiers CTF, Top 10 would be qualified for the finals at Egypt. We c0d3_h4cki05_(aka bi0s|Bangalore) finished 10th globally, hence we qualified for finals! Yay!\nIn this blog post I will be discussing 2 crypto challenges from Arab Security Wargames CTF Quals. As there were some glitches with the server initially, they shared the challenges repo in the discord server, so we were able to work on the challenges even though there were some glitches.\nS.No. Challenge Points 1 Challenge 3 600 2 Challenge 5 300 Challenge 3 output.txt\nGiven output.txt consists of Public Key (n \u0026amp; e) and ciphertext c\nn = 2318754427090927622417300593014303163027836982793164162950666250489681094136583599882469330682357229700000166714186122335692872792460409101465630110622887313064657894574037981904943176292533073634387002369380564791579428603519429963490374738649708747360755590037132507998435966068658633431918622092817702780128462915129741083129108481836485937804951555271147615962278158353917059561029043381242474374972583682945918237047674797098894662717409552897418650427548642489575961500481014997803061734956091625431696419759919121068387038071453059311371255995535187052409462363525765654622645413142987775053860188260137197659 e = 65537 c = 1852258477078452495280071169336816541669321769289372837198526954361460776833319048556839287633046754304414868057993901219892835088957705515939202089076460374548771033553266251154753679870528816210706553445963568771841753267644973871132621342897934474998162148362874305941012572949171990616677298854465965898581914403406403426504250013897086136105989549801404176555930509653029014518314103310549883855327513190607775750086851774949594618287441246861446444592130784569563671269161854267497652454746479173284327272563799067627736512266913669944284375302659511122504002144054772208775215907860036195680830269422876824977 I tried to factorize modulus n using factordb which didn\u0026rsquo;t help me, so I tried to find the fermat factors, if you don\u0026rsquo;t know the algo then no worry here is a simple function for Fermat factorization.\ndef fermat_factor(n): assert n % 2 != 0 a = gmpy2.isqrt(n) b2 = gmpy2.square(a) - n while not gmpy2.is_square(b2): a += 1 b2 = gmpy2.square(a) - n return a + gmpy2.isqrt(b2), a - gmpy2.isqrt(b2) yes, I found p and q using Fermat Factoriation,\np = 48153446679245376966822046985112099446617981034794594214042780096131516418638366375608599332095159143650219571976756039936351280836582867794175112625879990923510369077946617421338536566796348803001717218384229667003185508514134592197193786758239794011461538791978511429725895132475565257089664121103110770817 q = 48153446679245376966822046985112099446617981034794594214042780096131516418638366375608599332095159143650219571976756039936351280836582867794175112625874897500464997377986242441540940715154519674822662819026591330454041967249535003603147605312684911517825154805431323771837685531683672611660925609168788996827 Wait, challenge is not over yet. I tried decrypt the given ciphertext using these primes but couldn\u0026rsquo;t retrieve the plaintext. then I checked whether p and q are primes or not, as we totient function should be calculated only by primes. In [11]: isPrime(p) Out[11]: 0 In [12]: isPrime(q) Out[12]: 0 As the result shown above they aren\u0026rsquo;t primes. So I further factorized p and q which got reduced to p1, p2, q1, \u0026amp; q2.\np1 = 6939268454184877330211144138413966814481101061382015473621711919814088916348213343387168181954880781520959109737312885406280110070698427014630125251118873 p2 = 6939268454184877330211144138413966814481101061382015473621711919814088916348213343387168181954880781520959109737312885406280110070698427014630125251119529 q1 = 6939268454184877330211144138413966814481101061382015473621711919814088916348213343387168181954880781520959109737312885406280110070698427014630125251118111 q2 = 6939268454184877330211144138413966814481101061382015473621711919814088916348213343387168181954880781520959109737312885406280110070698427014630125251119557 so now the Euler totient function is\nphi = (p1-1)*(p2-1)*(q1-1)*(q2-1) Combining everything what I\u0026rsquo;ve discussed above we get entire exploit script,\nfrom Crypto.Util.number import * import gmpy2 def fermat_factors(n): assert n % 2 != 0 a = gmpy2.isqrt(n) b2 = gmpy2.square(a) - n while not gmpy2.is_square(b2): a += 1 b2 = gmpy2.square(a) - n return a + gmpy2.isqrt(b2), a - gmpy2.isqrt(b2) n = 2318754427090927622417300593014303163027836982793164162950666250489681094136583599882469330682357229700000166714186122335692872792460409101465630110622887313064657894574037981904943176292533073634387002369380564791579428603519429963490374738649708747360755590037132507998435966068658633431918622092817702780128462915129741083129108481836485937804951555271147615962278158353917059561029043381242474374972583682945918237047674797098894662717409552897418650427548642489575961500481014997803061734956091625431696419759919121068387038071453059311371255995535187052409462363525765654622645413142987775053860188260137197659 e = 65537 c = 1852258477078452495280071169336816541669321769289372837198526954361460776833319048556839287633046754304414868057993901219892835088957705515939202089076460374548771033553266251154753679870528816210706553445963568771841753267644973871132621342897934474998162148362874305941012572949171990616677298854465965898581914403406403426504250013897086136105989549801404176555930509653029014518314103310549883855327513190607775750086851774949594618287441246861446444592130784569563671269161854267497652454746479173284327272563799067627736512266913669944284375302659511122504002144054772208775215907860036195680830269422876824977 p, q = fermat_factors(n) p1, p2 = fermat_factors(p) q1, q2 = fermat_factors(q) phi = (p1-1)*(p2-1)*(q1-1)*(q2-1) d = inverse(e,phi) flag = long_to_bytes(pow(c,d,n)) print(flag) Flag: ASCWG{you_need_fermat_factorization_to_solve_RSA_Small_diffrince_Prime_Attack_12312}\nChallenge5 challenge.py output.txt\nThis challenge was pretty easy, I didn\u0026rsquo;t took much time to solve this chalenge as I was aware of this attack before. Given challenge.py is the encrypiton file and output.txt is the ciphertext,\nfrom Crypto.Cipher import DES import base64 from FLAG import flag def pad(plaintext): while len(plaintext) % 8 != 0: plaintext += \u0026#34;*\u0026#34; return plaintext def enc(plaintext,key): cipher = DES.new(key, DES.MODE_ECB) return base64.b64encode(cipher.encrypt(plaintext)) key = \u0026#34;##############\u0026#34;.decode(\u0026#34;hex\u0026#34;) plaintext = pad(flag) print enc(plaintext,key) kIi6qSDhcSVErHbkpy/M1hRHfDpr8TiaGbAIrKUXooxSXwNnaeJgTQ== When we look in to the challenge.py it consists of two functions pad for padding the flag and enc for encrypting in DES and that to in ECB mode.\nThe Vulnerability Here the vulnerability is the key. DES has specifically 4 weak keys. You can refer about weak keys here. So I applied DES weak key attack. And the weak keys are\n0x0000000000000000 0xFFFFFFFFFFFFFFFF 0xE1E1E1E1F0F0F0F0 0x1E1E1E1E0F0F0F0F As I don\u0026rsquo;t know the key with which they encrypted, I just bruteforced among the 4 possible keys and got the flag. Here is my entire exploit,\nfrom Crypto.Cipher import DES import base64 import binascii cipher = base64.b64decode(\u0026#34;kIi6qSDhcSVErHbkpy/M1hRHfDpr8TiaGbAIrKUXooxSXwNnaeJgTQ==\u0026#34;) \u0026#34;\u0026#34;\u0026#34; Check out the weak keys of DES. There are 4 possible weak keys 0x0000000000000000 0xFFFFFFFFFFFFFFFF 0xE1E1E1E1F0F0F0F0 0x1E1E1E1E0F0F0F0F \u0026#34;\u0026#34;\u0026#34; key = binascii.unhexlify(\u0026#34;0000000000000000\u0026#34;) des = DES.new(key,DES.MODE_ECB) pt = des.decrypt(cipher) print(pt) key = binascii.unhexlify(\u0026#34;FFFFFFFFFFFFFFFF\u0026#34;) des = DES.new(key,DES.MODE_ECB) pt = des.decrypt(cipher) print(pt) key = binascii.unhexlify(\u0026#34;E1E1E1E1F0F0F0F0\u0026#34;) des = DES.new(key,DES.MODE_ECB) pt = des.decrypt(cipher) print(pt) key = binascii.unhexlify(\u0026#34;1E1E1E1E0F0F0F0F\u0026#34;) des = DES.new(key,DES.MODE_ECB) pt = des.decrypt(cipher) print(pt) Flag: ASCWG{Welcome_to_des_weak_key_attack}\nYou can find both the exploit scripts in my github repo. Please post your comments in the comment section or you can ping me via twitter @st0ci3r for any queries, suggestions and feedback.\n","permalink":"https://malladisiddu.github.io/posts/arab-security-cyber-wargames/","summary":"First things first, Arab Security Cyber Wargames is a qualifiers CTF, Top 10 would be qualified for the finals at Egypt. We c0d3_h4cki05_(aka bi0s|Bangalore) finished 10th globally, hence we qualified for finals! Yay!\nIn this blog post I will be discussing 2 crypto challenges from Arab Security Wargames CTF Quals. As there were some glitches with the server initially, they shared the challenges repo in the discord server, so we were able to work on the challenges even though there were some glitches.","title":"Arab Security Cyber Wargames"},{"content":"Challenge: discrete log I heard some cryptosystem uses discrete logarithm.\nIt is hard problem, isn\u0026rsquo;t it?\nI encrypted the flag with 4095bit modulus\u0026hellip;\nAuthor : kiona\noutput.txt problem.py\nGiven generator, modulus and ciphertext\ng = 172749132303451034825184289722866887646478207718904031630914096520683022158034517117605936723970812800902379716660696042889559048647206589145869496198395421965440272135852383965230458163451729744948637995163776071512309614027603968693250321092562108610034043037860044795655266224453184735452048413623769098671844195106558284409006269382544367448145088128499405797694142037310933061698125568790497068516077791616445318819525778890129259953967830407023305805724947609041398183006524760589480514375528363943261764527906775893795625189651746165941438248136930298545695110631212696683271254403308539994170329875688236599305478130030194371971383054083049610267982461416568688720562725217837462387935392946474596966349477680685726377666929540130924122398746591270899232208239961618302848348129375606841006687727574503519146164506867574157671109933022528435615415554171024171300585408907077259610240139419075684581512703943171162496513070572546968852202777002845137863414028314025114932581655385254082418111977242759980115915504202336380850329162861826132885827910210346708045087589916666711356848614195462267049823085141386868421005551877773672329046391854000523197388175515628464457551891476514779819019668102328395639607489673081022505099 n = 204964538005458094391574690738766104196067587947267165575341074475716043971842449550067337731195102944823593489101699510575531541895593939634478254160200896755891641047742120885540191258962212405226135805491196590351987106011483652123110409148411537235255207358696047015199616340882291357173918540392964501976492251077110794432722042202109934588262870543755493029748475008610896164870659893013085704495216717998116109896882952474884270785733861739050889113464275228554841649603978281963688294995328883256317404081735364738985601286409677647577052211093127231530844271726386293348738817021732679704754961436390654856963930636538653822714234978179695778198536592408645222590877027896792957778186555118729335564281356291031440583078132397563914801937048297147819254611598144027963328749607393168101280779708669908245620694587176737529113823312930871616550632035759346759393976128246210013752530912953330415598837661326422094379798718827988692760848583517436061574821754507293943235476923624688378441177770313101393581916112910947153305055575974237171438666919114843946573283829704010962833299593770650238349021406868347635157566404829030358844616367849771415905381318344903398551946493709551783771889575282972265629264217620138873678733 enc = 58749077215207190492371298843854826665007067693641554277597021927783439106518176607848876784025881251057880587477892585242567469682290542409002363284991521084199535617805983767364935247518813883871587009725229910084882524866335007624383374126379502610933045897762967063766174922757656816300993939273687091280630401460905159739072179134897626330594985795970230333335492872721173603390854317323095769925904629970032658376378937924244589208035572848434030889091930182042226202356340798415809817722086119981262671540923062830870681500341640178082497128371291359953884993700348396920219975667972939044100089402796215197615549948516999318565775626034391795498234335228509335613253342179818268681240653806015040771731154600343889814141382273506238199460016081871283682838719833841393528105371834961952754168257271394981634141286257602629174903644009990944563870674888760807045240859970974837258567236802649772719645362361127488126570702845624169598462415354350277654287009645871674305081755840523910495569765451437265785385267255452210836618705384598344351666486694835670072372776263570462639412759703397195350879217144135006968472391258993407007505079063659488976186871280542665310586453539153772026697145449262179967269376262891840972187 Also they gave the encryption function, encrypt function looks like a DLP\ndef encrypt(pubkey, msg): g, n = pubkey msgint = bytes_to_long(msg) encint = pow(g, msgint, n) return encint but the keygen function made me to think\ndef keygen(): p = getPrime(1024) q = p**2 + (1\u0026lt;\u0026lt;256) while not(isPrime(q)): q += 2 n = p**2 * q while True: g = getRandomRange(2, n-1) if pow(g, p-1, p**2) != 1: break return (g, n), p After a lot of googling I came to know that this is Okamoto-Uchiyama Cryptosystem. Encryption and Decryption of this cryptosystem is The Vulnerability Given modulus(n) is factorizable I just used factorint function from sympy module to factorize n found p and q\np = 119651922772470381538865905053880240648981610788158704687128059461662288085281852229102200555108770317758154242404640572330743835298457861729905310772997229435609782100922883676187295581012547043047440427111941567355233755127540922309999250508616729587128520903493409357118622862418582616182347566040409411199 q = 14316582623149216275107736834733631963084207821436746289501498129530929625521490902864194713174501986932485113452517074017970673917631950366223575922988112330159225019538408970690585920890359634920580740147682705722228172472753088442523496334194454100216062475928574494498461028671300195357832818313464997449224252250371444494034870771502023373906812804159280130560764590554712397821927029154370470286256319839500521932294332044793429751975782128661939509416939951784853574757157319178829932860446931760541284010213101009421074205053284557804760664567589983709792028490535528417695748683896268760352087789362996257933 and then it is just the implementaion of the Okamoto-Uchiyama decryption function\ndef L(x, p): return (x-1)//p def res(x, y, p): return x*(inverse(y, p)) Here is my entire exploit,\nfrom Crypto.Util.number import * def L(x, p): return (x-1)//p def res(x, y, p): return x*(inverse(y, p)) c = 58749077215207190492371298843854826665007067693641554277597021927783439106518176607848876784025881251057880587477892585242567469682290542409002363284991521084199535617805983767364935247518813883871587009725229910084882524866335007624383374126379502610933045897762967063766174922757656816300993939273687091280630401460905159739072179134897626330594985795970230333335492872721173603390854317323095769925904629970032658376378937924244589208035572848434030889091930182042226202356340798415809817722086119981262671540923062830870681500341640178082497128371291359953884993700348396920219975667972939044100089402796215197615549948516999318565775626034391795498234335228509335613253342179818268681240653806015040771731154600343889814141382273506238199460016081871283682838719833841393528105371834961952754168257271394981634141286257602629174903644009990944563870674888760807045240859970974837258567236802649772719645362361127488126570702845624169598462415354350277654287009645871674305081755840523910495569765451437265785385267255452210836618705384598344351666486694835670072372776263570462639412759703397195350879217144135006968472391258993407007505079063659488976186871280542665310586453539153772026697145449262179967269376262891840972187 h = 192159296555627848138161414610654352733622245828513614322558905012466816654671972346097031349358247386944424511091960135752048099269046885847641446796741613064870966394096441981877237249574049165705367669167590253669921614109896281214885058820658568816500100732681453444211847674759535008378374194993480547115821823335912615050292051256279172523837607469551836256962239888184563456599538614372245459275406829924636980200891002347949094452338295057936566802092897987034436798432255668134027785450435019827028246194944275199769383463418480308364744322755424547117446235150277184138127498378264607769444968098425004126534119633031782416338154206700571418961129558294523843396301309255007288131883140330133903142845213481400374474735503009522483093310190196533677052463898663664335601466576736766660069653426577599703983465231424213328004576799542685640229970843791383652407916322015680525012551700803266007630695432556193833095738633105291346190869220704720694903194134841015855846831167967421505059755562552192829873204697156419144842126864221399403808755229408562864151563522531949899106533620150563956994515272797108554534792421110378348245132961702004979121873575596258771082192565891916462803744544917961364375730965315938457364679 n = 204964538005458094391574690738766104196067587947267165575341074475716043971842449550067337731195102944823593489101699510575531541895593939634478254160200896755891641047742120885540191258962212405226135805491196590351987106011483652123110409148411537235255207358696047015199616340882291357173918540392964501976492251077110794432722042202109934588262870543755493029748475008610896164870659893013085704495216717998116109896882952474884270785733861739050889113464275228554841649603978281963688294995328883256317404081735364738985601286409677647577052211093127231530844271726386293348738817021732679704754961436390654856963930636538653822714234978179695778198536592408645222590877027896792957778186555118729335564281356291031440583078132397563914801937048297147819254611598144027963328749607393168101280779708669908245620694587176737529113823312930871616550632035759346759393976128246210013752530912953330415598837661326422094379798718827988692760848583517436061574821754507293943235476923624688378441177770313101393581916112910947153305055575974237171438666919114843946573283829704010962833299593770650238349021406868347635157566404829030358844616367849771415905381318344903398551946493709551783771889575282972265629264217620138873678733 g = 172749132303451034825184289722866887646478207718904031630914096520683022158034517117605936723970812800902379716660696042889559048647206589145869496198395421965440272135852383965230458163451729744948637995163776071512309614027603968693250321092562108610034043037860044795655266224453184735452048413623769098671844195106558284409006269382544367448145088128499405797694142037310933061698125568790497068516077791616445318819525778890129259953967830407023305805724947609041398183006524760589480514375528363943261764527906775893795625189651746165941438248136930298545695110631212696683271254403308539994170329875688236599305478130030194371971383054083049610267982461416568688720562725217837462387935392946474596966349477680685726377666929540130924122398746591270899232208239961618302848348129375606841006687727574503519146164506867574157671109933022528435615415554171024171300585408907077259610240139419075684581512703943171162496513070572546968852202777002845137863414028314025114932581655385254082418111977242759980115915504202336380850329162861826132885827910210346708045087589916666711356848614195462267049823085141386868421005551877773672329046391854000523197388175515628464457551891476514779819019668102328395639607489673081022505099 p = 119651922772470381538865905053880240648981610788158704687128059461662288085281852229102200555108770317758154242404640572330743835298457861729905310772997229435609782100922883676187295581012547043047440427111941567355233755127540922309999250508616729587128520903493409357118622862418582616182347566040409411199 cp = pow(c, p-1, p**2) gp = pow(g, p-1, p**2) x = res(L(cp, p), L(gp, p), p) % p print(long_to_bytes(x)) Flag: Poseidon{l064r17hm_fr0m_7h3_cycl1c_6r0up}\nPlease post your comments in the comment section or you can ping me via twitter @st0ci3r for any queries, suggestions and feedback.\nReference Okamoto-Uchiyama Cryptosystem\n","permalink":"https://malladisiddu.github.io/posts/poseidonctf-2020-writeups/","summary":"Challenge: discrete log I heard some cryptosystem uses discrete logarithm.\nIt is hard problem, isn\u0026rsquo;t it?\nI encrypted the flag with 4095bit modulus\u0026hellip;\nAuthor : kiona\noutput.txt problem.py\nGiven generator, modulus and ciphertext\ng = 172749132303451034825184289722866887646478207718904031630914096520683022158034517117605936723970812800902379716660696042889559048647206589145869496198395421965440272135852383965230458163451729744948637995163776071512309614027603968693250321092562108610034043037860044795655266224453184735452048413623769098671844195106558284409006269382544367448145088128499405797694142037310933061698125568790497068516077791616445318819525778890129259953967830407023305805724947609041398183006524760589480514375528363943261764527906775893795625189651746165941438248136930298545695110631212696683271254403308539994170329875688236599305478130030194371971383054083049610267982461416568688720562725217837462387935392946474596966349477680685726377666929540130924122398746591270899232208239961618302848348129375606841006687727574503519146164506867574157671109933022528435615415554171024171300585408907077259610240139419075684581512703943171162496513070572546968852202777002845137863414028314025114932581655385254082418111977242759980115915504202336380850329162861826132885827910210346708045087589916666711356848614195462267049823085141386868421005551877773672329046391854000523197388175515628464457551891476514779819019668102328395639607489673081022505099 n = 204964538005458094391574690738766104196067587947267165575341074475716043971842449550067337731195102944823593489101699510575531541895593939634478254160200896755891641047742120885540191258962212405226135805491196590351987106011483652123110409148411537235255207358696047015199616340882291357173918540392964501976492251077110794432722042202109934588262870543755493029748475008610896164870659893013085704495216717998116109896882952474884270785733861739050889113464275228554841649603978281963688294995328883256317404081735364738985601286409677647577052211093127231530844271726386293348738817021732679704754961436390654856963930636538653822714234978179695778198536592408645222590877027896792957778186555118729335564281356291031440583078132397563914801937048297147819254611598144027963328749607393168101280779708669908245620694587176737529113823312930871616550632035759346759393976128246210013752530912953330415598837661326422094379798718827988692760848583517436061574821754507293943235476923624688378441177770313101393581916112910947153305055575974237171438666919114843946573283829704010962833299593770650238349021406868347635157566404829030358844616367849771415905381318344903398551946493709551783771889575282972265629264217620138873678733 enc = 58749077215207190492371298843854826665007067693641554277597021927783439106518176607848876784025881251057880587477892585242567469682290542409002363284991521084199535617805983767364935247518813883871587009725229910084882524866335007624383374126379502610933045897762967063766174922757656816300993939273687091280630401460905159739072179134897626330594985795970230333335492872721173603390854317323095769925904629970032658376378937924244589208035572848434030889091930182042226202356340798415809817722086119981262671540923062830870681500341640178082497128371291359953884993700348396920219975667972939044100089402796215197615549948516999318565775626034391795498234335228509335613253342179818268681240653806015040771731154600343889814141382273506238199460016081871283682838719833841393528105371834961952754168257271394981634141286257602629174903644009990944563870674888760807045240859970974837258567236802649772719645362361127488126570702845624169598462415354350277654287009645871674305081755840523910495569765451437265785385267255452210836618705384598344351666486694835670072372776263570462639412759703397195350879217144135006968472391258993407007505079063659488976186871280542665310586453539153772026697145449262179967269376262891840972187 Also they gave the encryption function, encrypt function looks like a DLP\ndef encrypt(pubkey, msg): g, n = pubkey msgint = bytes_to_long(msg) encint = pow(g, msgint, n) return encint but the keygen function made me to think","title":"PoseidonCTF 2020 writeups"},{"content":"Challenge: PolyRSA Description All the warmup you need\nWriteup Given out.txt which consists of\np n (as polynomial) m^65537 (ciphertext also as polynomial) To be honest, I never solved an RSA challenge based polynomials. So I checked for similar challenges which I couldn\u0026rsquo;t find, but I found one research paper from which I was able to solve this challenge. It is just similar to integer RSA, instead of numbers we have here polynomials. Here the toient function is s = (p^m-1)*(p^n-1) where m \u0026amp; n are the degree of the two irreducible polynomials reduced from modulus(n)\nThe Vulnerability Given n is factorizable. Here is my exploit written in sage, p = 2470567871 P.\u0026lt;x\u0026gt; = PolynomialRing(GF(p)) e = 65537 n = 1932231392*x^255 + 1432733708*x^254 + 1270867914*x^253 + 1573324635*x^252 + 2378103997*x^251 + 820889786*x^250 + 762279735*x^249 + 1378353578*x^248 + 1226179520*x^247 + 657116276*x^246 + 1264717357*x^245 + 1015587392*x^244 + 849699356*x^243 + 1509168990*x^242 + 2407367106*x^241 + 873379233*x^240 + 2391647981*x^239 + 517715639*x^238 + 828941376*x^237 + 843708018*x^236 + 1526075137*x^235 + 1499291590*x^234 + 235611028*x^233 + 19615265*x^232 + 53338886*x^231 + 434434839*x^230 + 902171938*x^229 + 516444143*x^228 + 1984443642*x^227 + 966493372*x^226 + 1166227650*x^225 + 1824442929*x^224 + 930231465*x^223 + 1664522302*x^222 + 1067203343*x^221 + 28569139*x^220 + 2327926559*x^219 + 899788156*x^218 + 296985783*x^217 + 1144578716*x^216 + 340677494*x^215 + 254306901*x^214 + 766641243*x^213 + 1882320336*x^212 + 2139903463*x^211 + 1904225023*x^210 + 475412928*x^209 + 127723603*x^208 + 2015416361*x^207 + 1500078813*x^206 + 1845826007*x^205 + 797486240*x^204 + 85924125*x^203 + 1921772796*x^202 + 1322682658*x^201 + 2372929383*x^200 + 1323964787*x^199 + 1302258424*x^198 + 271875267*x^197 + 1297768962*x^196 + 2147341770*x^195 + 1665066191*x^194 + 2342921569*x^193 + 1450622685*x^192 + 1453466049*x^191 + 1105227173*x^190 + 2357717379*x^189 + 1044263540*x^188 + 697816284*x^187 + 647124526*x^186 + 1414769298*x^185 + 657373752*x^184 + 91863906*x^183 + 1095083181*x^182 + 658171402*x^181 + 75339882*x^180 + 2216678027*x^179 + 2208320155*x^178 + 1351845267*x^177 + 1740451894*x^176 + 1302531891*x^175 + 320751753*x^174 + 1303477598*x^173 + 783321123*x^172 + 1400145206*x^171 + 1379768234*x^170 + 1191445903*x^169 + 946530449*x^168 + 2008674144*x^167 + 2247371104*x^166 + 1267042416*x^165 + 1795774455*x^164 + 1976911493*x^163 + 167037165*x^162 + 1848717750*x^161 + 573072954*x^160 + 1126046031*x^159 + 376257986*x^158 + 1001726783*x^157 + 2250967824*x^156 + 2339380314*x^155 + 571922874*x^154 + 961000788*x^153 + 306686020*x^152 + 80717392*x^151 + 2454799241*x^150 + 1005427673*x^149 + 1032257735*x^148 + 593980163*x^147 + 1656568780*x^146 + 1865541316*x^145 + 2003844061*x^144 + 1265566902*x^143 + 573548790*x^142 + 494063408*x^141 + 1722266624*x^140 + 938551278*x^139 + 2284832499*x^138 + 597191613*x^137 + 476121126*x^136 + 1237943942*x^135 + 275861976*x^134 + 1603993606*x^133 + 1895285286*x^132 + 589034062*x^131 + 713986937*x^130 + 1206118526*x^129 + 311679750*x^128 + 1989860861*x^127 + 1551409650*x^126 + 2188452501*x^125 + 1175930901*x^124 + 1991529213*x^123 + 2019090583*x^122 + 215965300*x^121 + 532432639*x^120 + 1148806816*x^119 + 493362403*x^118 + 2166920790*x^117 + 185609624*x^116 + 184370704*x^115 + 2141702861*x^114 + 223551915*x^113 + 298497455*x^112 + 722376028*x^111 + 678813029*x^110 + 915121681*x^109 + 1107871854*x^108 + 1369194845*x^107 + 328165402*x^106 + 1792110161*x^105 + 798151427*x^104 + 954952187*x^103 + 471555401*x^102 + 68969853*x^101 + 453598910*x^100 + 2458706380*x^99 + 889221741*x^98 + 320515821*x^97 + 1549538476*x^96 + 909607400*x^95 + 499973742*x^94 + 552728308*x^93 + 1538610725*x^92 + 186272117*x^91 + 862153635*x^90 + 981463824*x^89 + 2400233482*x^88 + 1742475067*x^87 + 437801940*x^86 + 1504315277*x^85 + 1756497351*x^84 + 197089583*x^83 + 2082285292*x^82 + 109369793*x^81 + 2197572728*x^80 + 107235697*x^79 + 567322310*x^78 + 1755205142*x^77 + 1089091449*x^76 + 1993836978*x^75 + 2393709429*x^74 + 170647828*x^73 + 1205814501*x^72 + 2444570340*x^71 + 328372190*x^70 + 1929704306*x^69 + 717796715*x^68 + 1057597610*x^67 + 482243092*x^66 + 277530014*x^65 + 2393168828*x^64 + 12380707*x^63 + 1108646500*x^62 + 637721571*x^61 + 604983755*x^60 + 1142068056*x^59 + 1911643955*x^58 + 1713852330*x^57 + 1757273231*x^56 + 1778819295*x^55 + 957146826*x^54 + 900005615*x^53 + 521467961*x^52 + 1255707235*x^51 + 861871574*x^50 + 397953653*x^49 + 1259753202*x^48 + 471431762*x^47 + 1245956917*x^46 + 1688297180*x^45 + 1536178591*x^44 + 1833258462*x^43 + 1369087493*x^42 + 459426544*x^41 + 418389643*x^40 + 1800239647*x^39 + 2467433889*x^38 + 477713059*x^37 + 1898813986*x^36 + 2202042708*x^35 + 894088738*x^34 + 1204601190*x^33 + 1592921228*x^32 + 2234027582*x^31 + 1308900201*x^30 + 461430959*x^29 + 718926726*x^28 + 2081988029*x^27 + 1337342428*x^26 + 2039153142*x^25 + 1364177470*x^24 + 613659517*x^23 + 853968854*x^22 + 1013582418*x^21 + 1167857934*x^20 + 2014147362*x^19 + 1083466865*x^18 + 1091690302*x^17 + 302196939*x^16 + 1946675573*x^15 + 2450124113*x^14 + 1199066291*x^13 + 401889502*x^12 + 712045611*x^11 + 1850096904*x^10 + 1808400208*x^9 + 1567687877*x^8 + 2013445952*x^7 + 2435360770*x^6 + 2414019676*x^5 + 2277377050*x^4 + 2148341337*x^3 + 1073721716*x^2 + 1045363399*x + 1809685811 c = 1208612545*x^254 + 1003144104*x^253 + 1173365710*x^252 + 1528252326*x^251 + 2263767409*x^250 + 2030579621*x^249 + 820048372*x^248 + 1474305505*x^247 + 1313951805*x^246 + 191260021*x^245 + 687901467*x^244 + 231907128*x^243 + 1757265648*x^242 + 1536859261*x^241 + 97792274*x^240 + 86150615*x^239 + 2283802022*x^238 + 728791370*x^237 + 1402241073*x^236 + 2010876897*x^235 + 1112960608*x^234 + 1785301939*x^233 + 862124720*x^232 + 573190801*x^231 + 1353395115*x^230 + 1041912948*x^229 + 1592516519*x^228 + 2043096090*x^227 + 970437868*x^226 + 945296597*x^225 + 764979415*x^224 + 151795004*x^223 + 744776063*x^222 + 49064457*x^221 + 379720326*x^220 + 549708067*x^219 + 1278937325*x^218 + 1348751857*x^217 + 897039278*x^216 + 1738651055*x^215 + 1458044806*x^214 + 947593966*x^213 + 604294495*x^212 + 1101712128*x^211 + 1106608879*x^210 + 556697284*x^209 + 339078898*x^208 + 135886774*x^207 + 682237064*x^206 + 1298394254*x^205 + 2038363686*x^204 + 1138996508*x^203 + 321551693*x^202 + 1194023535*x^201 + 1627100598*x^200 + 581786959*x^199 + 209400153*x^198 + 1354413890*x^197 + 1689568849*x^196 + 1038349567*x^195 + 2129265853*x^194 + 96150366*x^193 + 1879712323*x^192 + 140146576*x^191 + 855348682*x^190 + 571231503*x^189 + 1759489757*x^188 + 1528175919*x^187 + 1420729777*x^186 + 1778060705*x^185 + 204520875*x^184 + 2409946047*x^183 + 1703900286*x^182 + 379350638*x^181 + 145936788*x^180 + 644037909*x^179 + 946490870*x^178 + 2143460817*x^177 + 2124654819*x^176 + 735909283*x^175 + 1956333192*x^174 + 69508572*x^173 + 1998473705*x^172 + 2219097711*x^171 + 2324764950*x^170 + 1295835297*x^169 + 475763021*x^168 + 124896627*x^167 + 392652227*x^166 + 2414019050*x^165 + 519556546*x^164 + 2379934828*x^163 + 74942046*x^162 + 2333943359*x^161 + 5807728*x^160 + 1572302913*x^159 + 933057583*x^158 + 2327572070*x^157 + 2174172163*x^156 + 326654947*x^155 + 2362777406*x^154 + 1571381551*x^153 + 818720017*x^152 + 564409161*x^151 + 784212625*x^150 + 2084631116*x^149 + 1709163682*x^148 + 1791572159*x^147 + 2362306858*x^146 + 1870950847*x^145 + 936293454*x^144 + 1992907305*x^143 + 2427866610*x^142 + 1377299939*x^141 + 2336147340*x^140 + 419537038*x^139 + 1775945090*x^138 + 1084486367*x^137 + 1628708302*x^136 + 624109245*x^135 + 1140675451*x^134 + 848915999*x^133 + 1380203834*x^132 + 103496883*x^131 + 81739774*x^130 + 2055692293*x^129 + 1586687843*x^128 + 1682316161*x^127 + 134734383*x^126 + 885001299*x^125 + 2466212723*x^124 + 137905246*x^123 + 2305925724*x^122 + 410043787*x^121 + 2154453335*x^120 + 2018367068*x^119 + 1967315089*x^118 + 220606010*x^117 + 1066579186*x^116 + 2022385524*x^115 + 1564928688*x^114 + 851080667*x^113 + 1683812556*x^112 + 672848621*x^111 + 646553151*x^110 + 1348955204*x^109 + 1543570099*x^108 + 2260622184*x^107 + 1111757240*x^106 + 1797688791*x^105 + 1307761272*x^104 + 179896670*x^103 + 1197947306*x^102 + 1792231092*x^101 + 1515817157*x^100 + 1510541452*x^99 + 1784535666*x^98 + 1755403646*x^97 + 2388416288*x^96 + 1913808879*x^95 + 2139772089*x^94 + 1373043969*x^93 + 900021127*x^92 + 1613888837*x^91 + 331160696*x^90 + 2404083812*x^89 + 448818904*x^88 + 592910594*x^87 + 2436296390*x^86 + 2103089380*x^85 + 2027661376*x^84 + 277165788*x^83 + 717390488*x^82 + 319876555*x^81 + 1394843317*x^80 + 2314542109*x^79 + 2295617403*x^78 + 313842193*x^77 + 1918458371*x^76 + 1189324530*x^75 + 1765150225*x^74 + 1107038066*x^73 + 613811679*x^72 + 578744934*x^71 + 538203467*x^70 + 1710976133*x^69 + 1681208001*x^68 + 462043988*x^67 + 299437516*x^66 + 1843758398*x^65 + 851754779*x^64 + 1850189150*x^63 + 710529550*x^62 + 922473306*x^61 + 2344816934*x^60 + 54182289*x^59 + 2394694981*x^58 + 1849818608*x^57 + 1926799414*x^56 + 950266030*x^55 + 1290713338*x^54 + 1851455277*x^53 + 1607851092*x^52 + 1587576465*x^51 + 2279226257*x^50 + 1637387507*x^49 + 779327218*x^48 + 919124653*x^47 + 1126060258*x^46 + 2304179492*x^45 + 77984480*x^44 + 966167063*x^43 + 402292668*x^42 + 1332816563*x^41 + 524746316*x^40 + 2427530022*x^39 + 677075099*x^38 + 755256194*x^37 + 2152433299*x^36 + 2197374397*x^35 + 2290208129*x^34 + 996810109*x^33 + 101994796*x^32 + 252415814*x^31 + 1964967972*x^30 + 1533782356*x^29 + 1034980624*x^28 + 816216163*x^27 + 1535614986*x^26 + 1835762944*x^25 + 1147606118*x^24 + 1189426347*x^23 + 33594119*x^22 + 2113251273*x^21 + 826059142*x^20 + 1074101610*x^19 + 1638140405*x^18 + 1633380033*x^17 + 2005588694*x^16 + 2087514746*x^15 + 768034353*x^14 + 104476320*x^13 + 483234608*x^12 + 2424146196*x^11 + 49841203*x^10 + 145673059*x^9 + 705090263*x^8 + 1832451737*x^7 + 2394175351*x^6 + 1966712784*x^5 + 276537935*x^4 + 499607533*x^3 + 1981107449*x^2 + 776654074*x + 886398299 q1, q2 = n.factor() q1, q2 = q1[0], q2[0] s = (p^q1.degree() - 1) * (p^q2.degree() - 1) d = inverse_mod(e, s) m = pow(c, d, n) flag = bytearray(m) print(\u0026#34;Flag: \u0026#34;,flag.decode()) Flag: inctf{and_i_4m_ir0n_m4n} Post your comments either in the comment section or you can ping me in twitter at st0ic3r for queries, sugestions and feedback.\nReference Polynomial RSA\n","permalink":"https://malladisiddu.github.io/posts/inctf-2020-writeups/","summary":"Challenge: PolyRSA Description All the warmup you need\nWriteup Given out.txt which consists of\np n (as polynomial) m^65537 (ciphertext also as polynomial) To be honest, I never solved an RSA challenge based polynomials. So I checked for similar challenges which I couldn\u0026rsquo;t find, but I found one research paper from which I was able to solve this challenge. It is just similar to integer RSA, instead of numbers we have here polynomials.","title":"InCTF 2020 writeups"}]